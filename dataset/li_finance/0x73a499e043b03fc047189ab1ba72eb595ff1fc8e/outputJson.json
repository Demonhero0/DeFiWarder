{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Facets/AnyswapFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ILiFi } from \\\"../Interfaces/ILiFi.sol\\\";\\nimport { IAnyswapRouter } from \\\"../Interfaces/IAnyswapRouter.sol\\\";\\nimport { LibDiamond } from \\\"../Libraries/LibDiamond.sol\\\";\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { LibSwap } from \\\"../Libraries/LibSwap.sol\\\";\\nimport { IAnyswapToken } from \\\"../Interfaces/IAnyswapToken.sol\\\";\\nimport { LibDiamond } from \\\"../Libraries/LibDiamond.sol\\\";\\n\\ncontract AnyswapFacet is ILiFi {\\n    /* ========== Types ========== */\\n\\n    struct AnyswapData {\\n        address token;\\n        address router;\\n        uint256 amount;\\n        address recipient;\\n        uint256 toChainId;\\n    }\\n\\n    /* ========== Public Bridge Functions ========== */\\n\\n    /**\\n     * @notice Bridges tokens via Anyswap\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _anyswapData data specific to Anyswap\\n     */\\n    function startBridgeTokensViaAnyswap(LiFiData memory _lifiData, AnyswapData calldata _anyswapData) public payable {\\n        if (_anyswapData.token != address(0)) {\\n            address underlyingToken = IAnyswapToken(_anyswapData.token).underlying();\\n\\n            uint256 _fromTokenBalance = LibAsset.getOwnBalance(underlyingToken);\\n            LibAsset.transferFromERC20(underlyingToken, msg.sender, address(this), _anyswapData.amount);\\n\\n            require(\\n                LibAsset.getOwnBalance(underlyingToken) - _fromTokenBalance == _anyswapData.amount,\\n                \\\"ERR_INVALID_AMOUNT\\\"\\n            );\\n        } else {\\n            require(msg.value == _anyswapData.amount, \\\"ERR_INVALID_AMOUNT\\\");\\n        }\\n\\n        _startBridge(_anyswapData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Performs a swap before bridging via Anyswap\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _swapData an array of swap related data for performing swaps before bridging\\n     * @param _anyswapData data specific to Anyswap\\n     */\\n    function swapAndStartBridgeTokensViaAnyswap(\\n        LiFiData memory _lifiData,\\n        LibSwap.SwapData[] calldata _swapData,\\n        AnyswapData memory _anyswapData\\n    ) public payable {\\n        if (_anyswapData.token != address(0)) {\\n            address underlyingToken = IAnyswapToken(_anyswapData.token).underlying();\\n            uint256 _fromTokenBalance = LibAsset.getOwnBalance(underlyingToken);\\n\\n            // Swap\\n            for (uint8 i; i < _swapData.length; i++) {\\n                LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n            }\\n\\n            uint256 _postSwapBalance = LibAsset.getOwnBalance(underlyingToken) - _fromTokenBalance;\\n\\n            require(_postSwapBalance > 0, \\\"ERR_INVALID_AMOUNT\\\");\\n\\n            _anyswapData.amount = _postSwapBalance;\\n        } else {\\n            uint256 _fromBalance = address(this).balance;\\n\\n            // Swap\\n            for (uint8 i; i < _swapData.length; i++) {\\n                LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n            }\\n\\n            require(address(this).balance - _fromBalance >= _anyswapData.amount, \\\"ERR_INVALID_AMOUNT\\\");\\n\\n            uint256 _postSwapBalance = address(this).balance - _fromBalance;\\n\\n            require(_postSwapBalance > 0, \\\"ERR_INVALID_AMOUNT\\\");\\n\\n            _anyswapData.amount = _postSwapBalance;\\n        }\\n\\n        _startBridge(_anyswapData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /* ========== Internal Functions ========== */\\n\\n    /**\\n     * @dev Conatains the business logic for the bridge via Anyswap\\n     * @param _anyswapData data specific to Anyswap\\n     */\\n    function _startBridge(AnyswapData memory _anyswapData) internal {\\n        // Check chain id\\n        require(block.chainid != _anyswapData.toChainId, \\\"Cannot bridge to the same network.\\\");\\n\\n        if (_anyswapData.token != address(0)) {\\n            // Give Anyswap approval to bridge tokens\\n            LibAsset.approveERC20(\\n                IERC20(IAnyswapToken(_anyswapData.token).underlying()),\\n                _anyswapData.router,\\n                _anyswapData.amount\\n            );\\n\\n            IAnyswapRouter(_anyswapData.router).anySwapOutUnderlying(\\n                _anyswapData.token,\\n                _anyswapData.recipient,\\n                _anyswapData.amount,\\n                _anyswapData.toChainId\\n            );\\n        } else {\\n            IAnyswapRouter(_anyswapData.router).anySwapOutNative{ value: _anyswapData.amount }(\\n                _anyswapData.token,\\n                _anyswapData.recipient,\\n                _anyswapData.toChainId\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/ILiFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ILiFi {\\n    /* ========== Structs ========== */\\n\\n    struct LiFiData {\\n        bytes32 transactionId;\\n        string integrator;\\n        address referrer;\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        address receiver;\\n        uint256 destinationChainId;\\n        uint256 amount;\\n    }\\n\\n    /* ========== Events ========== */\\n\\n    event LiFiTransferStarted(\\n        bytes32 indexed transactionId,\\n        string integrator,\\n        address referrer,\\n        address sendingAssetId,\\n        address receivingAssetId,\\n        address receiver,\\n        uint256 amount,\\n        uint256 destinationChainId,\\n        uint256 timestamp\\n    );\\n\\n    event LiFiTransferCompleted(\\n        bytes32 indexed transactionId,\\n        address receivingAssetId,\\n        address receiver,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    event LiFiTransferConfirmed(\\n        bytes32 indexed transactionId,\\n        string integrator,\\n        address referrer,\\n        address sendingAssetId,\\n        address receivingAssetId,\\n        address receiver,\\n        uint256 amount,\\n        uint256 destinationChainId,\\n        uint256 timestamp\\n    );\\n    event LiFiTransferRefunded(\\n        bytes32 indexed transactionId,\\n        string integrator,\\n        address referrer,\\n        address sendingAssetId,\\n        address receivingAssetId,\\n        address receiver,\\n        uint256 amount,\\n        uint256 destinationChainId,\\n        uint256 timestamp\\n    );\\n    event Inited(address indexed bridge, uint64 chainId);\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IAnyswapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IAnyswapRouter {\\n    function anySwapOutUnderlying(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        uint256 toChainID\\n    ) external;\\n\\n    function anySwapOutNative(\\n        address token,\\n        address to,\\n        uint256 toChainID\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/Libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IDiamondCut } from \\\"../Interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondStorage storage ds,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Libraries/LibAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title LibAsset\\n * @author Connext <support@connext.network>\\n * @notice This library contains helpers for dealing with onchain transfers\\n *         of assets, including accounting for the native asset `assetId`\\n *         conventions and any noncompliant ERC20 transfers\\n */\\nlibrary LibAsset {\\n    uint256 private constant MAX_INT = 2**256 - 1;\\n\\n    /**\\n     * @dev All native assets use the empty address for their asset id\\n     *      by convention\\n     */\\n    address internal constant NATIVE_ASSETID = address(0);\\n\\n    /**\\n     * @notice Determines whether the given assetId is the native asset\\n     * @param assetId The asset identifier to evaluate\\n     * @return Boolean indicating if the asset is the native asset\\n     */\\n    function isNativeAsset(address assetId) internal pure returns (bool) {\\n        return assetId == NATIVE_ASSETID;\\n    }\\n\\n    /**\\n     * @notice Gets the balance of the inheriting contract for the given asset\\n     * @param assetId The asset identifier to get the balance of\\n     * @return Balance held by contracts using this library\\n     */\\n    function getOwnBalance(address assetId) internal view returns (uint256) {\\n        return isNativeAsset(assetId) ? address(this).balance : IERC20(assetId).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Transfers ether from the inheriting contract to a given\\n     *         recipient\\n     * @param recipient Address to send ether to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferNativeAsset(address payable recipient, uint256 amount) internal {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"#TNA:028\\\");\\n    }\\n\\n    /**\\n     * @notice Gives approval for another address to spend tokens\\n     * @param assetId Token address to transfer\\n     * @param spender Address to give spend approval to\\n     * @param amount Amount to approve for spending\\n     */\\n    function approveERC20(\\n        IERC20 assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (isNativeAsset(address(assetId))) return;\\n        uint256 allowance = assetId.allowance(address(this), spender);\\n        if (allowance < amount) {\\n            if (allowance > 0) SafeERC20.safeApprove(IERC20(assetId), spender, 0);\\n            SafeERC20.safeApprove(IERC20(assetId), spender, MAX_INT);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from the inheriting contract to a given\\n     *         recipient\\n     * @param assetId Token address to transfer\\n     * @param recipient Address to send ether to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferERC20(\\n        address assetId,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20.safeTransfer(IERC20(assetId), recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from a sender to a given recipient\\n     * @param assetId Token address to transfer\\n     * @param from Address of sender/owner\\n     * @param to Address of recipient/spender\\n     * @param amount Amount to transfer from owner to spender\\n     */\\n    function transferFromERC20(\\n        address assetId,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        SafeERC20.safeTransferFrom(IERC20(assetId), from, to, amount);\\n    }\\n\\n    /**\\n     * @notice Increases the allowance of a token to a spender\\n     * @param assetId Token address of asset to increase allowance of\\n     * @param spender Account whos allowance is increased\\n     * @param amount Amount to increase allowance by\\n     */\\n    function increaseERC20Allowance(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(!isNativeAsset(assetId), \\\"#IA:034\\\");\\n        SafeERC20.safeIncreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Decreases the allowance of a token to a spender\\n     * @param assetId Token address of asset to decrease allowance of\\n     * @param spender Account whos allowance is decreased\\n     * @param amount Amount to decrease allowance by\\n     */\\n    function decreaseERC20Allowance(\\n        address assetId,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(!isNativeAsset(assetId), \\\"#DA:034\\\");\\n        SafeERC20.safeDecreaseAllowance(IERC20(assetId), spender, amount);\\n    }\\n\\n    /**\\n     * @notice Wrapper function to transfer a given asset (native or erc20) to\\n     *         some recipient. Should handle all non-compliant return value\\n     *         tokens as well by using the SafeERC20 contract by open zeppelin.\\n     * @param assetId Asset id for transfer (address(0) for native asset,\\n     *                token address for erc20s)\\n     * @param recipient Address to send asset to\\n     * @param amount Amount to send to given recipient\\n     */\\n    function transferAsset(\\n        address assetId,\\n        address payable recipient,\\n        uint256 amount\\n    ) internal {\\n        isNativeAsset(assetId) ? transferNativeAsset(recipient, amount) : transferERC20(assetId, recipient, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Libraries/LibSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { LibAsset } from \\\"./LibAsset.sol\\\";\\nimport { LibUtil } from \\\"./LibUtil.sol\\\";\\n\\nlibrary LibSwap {\\n    uint256 private constant MAX_INT = 2**256 - 1;\\n\\n    struct SwapData {\\n        address callTo;\\n        address approveTo;\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        uint256 fromAmount;\\n        bytes callData;\\n    }\\n\\n    event AssetSwapped(\\n        bytes32 transactionId,\\n        address dex,\\n        address fromAssetId,\\n        address toAssetId,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        uint256 timestamp\\n    );\\n\\n    function swap(bytes32 transactionId, SwapData calldata _swapData) internal {\\n        uint256 fromAmount = _swapData.fromAmount;\\n        uint256 toAmount = LibAsset.getOwnBalance(_swapData.receivingAssetId);\\n        address fromAssetId = _swapData.sendingAssetId;\\n        if (!LibAsset.isNativeAsset(fromAssetId) && LibAsset.getOwnBalance(fromAssetId) < fromAmount) {\\n            LibAsset.transferFromERC20(_swapData.sendingAssetId, msg.sender, address(this), fromAmount);\\n        }\\n\\n        if (!LibAsset.isNativeAsset(fromAssetId)) {\\n            LibAsset.approveERC20(IERC20(fromAssetId), _swapData.approveTo, fromAmount);\\n        }\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory res) = _swapData.callTo.call{ value: msg.value }(_swapData.callData);\\n        if (!success) {\\n            string memory reason = LibUtil.getRevertMsg(res);\\n            revert(reason);\\n        }\\n\\n        toAmount = LibAsset.getOwnBalance(_swapData.receivingAssetId) - toAmount;\\n        emit AssetSwapped(\\n            transactionId,\\n            _swapData.callTo,\\n            _swapData.sendingAssetId,\\n            _swapData.receivingAssetId,\\n            fromAmount,\\n            toAmount,\\n            block.timestamp\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IAnyswapToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IAnyswapToken {\\n    function underlying() external returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Libraries/LibUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./LibBytes.sol\\\";\\n\\nlibrary LibUtil {\\n    using LibBytes for bytes;\\n\\n    function getRevertMsg(bytes memory _res) internal pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_res.length < 68) return \\\"Transaction reverted silently\\\";\\n        bytes memory revertData = _res.slice(4, _res.length - 4); // Remove the selector which is the first 4 bytes\\n        return abi.decode(revertData, (string)); // All that remains is the revert string\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Libraries/LibBytes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nlibrary LibBytes {\\n    // solhint-disable no-inline-assembly\\n\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        // solhint-disable-next-line no-empty-blocks\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Facets/WormholeFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ILiFi } from \\\"../Interfaces/ILiFi.sol\\\";\\nimport { IWormholeRouter } from \\\"../Interfaces/IWormholeRouter.sol\\\";\\nimport { LibDiamond } from \\\"../Libraries/LibDiamond.sol\\\";\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { LibSwap } from \\\"../Libraries/LibSwap.sol\\\";\\n\\ncontract WormholeFacet is ILiFi {\\n    /* ========== Storage ========== */\\n\\n    bytes32 internal constant NAMESPACE = keccak256(\\\"com.lifi.facets.wormhole\\\");\\n    struct Storage {\\n        address wormholeRouter;\\n    }\\n\\n    /* ========== Types ========== */\\n\\n    struct WormholeData {\\n        address token;\\n        uint256 amount;\\n        address recipient;\\n        uint16 toChainId;\\n        uint32 nonce;\\n    }\\n\\n    /* ========== Init ========== */\\n\\n    function initWormhole(address _wormholeRouter) external {\\n        Storage storage s = getStorage();\\n        LibDiamond.enforceIsContractOwner();\\n        s.wormholeRouter = _wormholeRouter;\\n    }\\n\\n    /* ========== Public Bridge Functions ========== */\\n\\n    /**\\n     * @notice Bridges tokens via Wormhole\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _wormholeData data specific to Wormhole\\n     */\\n    function startBridgeTokensViaWormhole(LiFiData memory _lifiData, WormholeData calldata _wormholeData)\\n        public\\n        payable\\n    {\\n        uint256 _fromTokenBalance = LibAsset.getOwnBalance(_wormholeData.token);\\n\\n        LibAsset.transferFromERC20(_wormholeData.token, msg.sender, address(this), _wormholeData.amount);\\n\\n        require(\\n            LibAsset.getOwnBalance(_wormholeData.token) - _fromTokenBalance == _wormholeData.amount,\\n            \\\"ERR_INVALID_AMOUNT\\\"\\n        );\\n\\n        _startBridge(_wormholeData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Performs a swap before bridging via Wormhole\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _swapData an array of swap related data for performing swaps before bridging\\n     * @param _wormholeData data specific to Wormhole\\n     */\\n    function swapAndStartBridgeTokensViaWormhole(\\n        LiFiData memory _lifiData,\\n        LibSwap.SwapData[] calldata _swapData,\\n        WormholeData memory _wormholeData\\n    ) public payable {\\n        uint256 _fromTokenBalance = LibAsset.getOwnBalance(_wormholeData.token);\\n\\n        // Swap\\n        for (uint8 i; i < _swapData.length; i++) {\\n            LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n        }\\n\\n        require(\\n            LibAsset.getOwnBalance(_wormholeData.token) - _fromTokenBalance >= _wormholeData.amount,\\n            \\\"ERR_INVALID_AMOUNT\\\"\\n        );\\n\\n        uint256 _postSwapBalance = LibAsset.getOwnBalance(_wormholeData.token) - _fromTokenBalance;\\n\\n        require(_postSwapBalance > 0, \\\"ERR_INVALID_AMOUNT\\\");\\n\\n        _wormholeData.amount = _postSwapBalance;\\n\\n        _startBridge(_wormholeData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /* ========== External Config Functions ========== */\\n\\n    /**\\n     * @dev Changes address of Wormhole router\\n     * @param _newRouter address of the new router\\n     */\\n    function changeWormholeRouter(address _newRouter) external {\\n        Storage storage s = getStorage();\\n        LibDiamond.enforceIsContractOwner();\\n        s.wormholeRouter = _newRouter;\\n    }\\n\\n    /* ========== Internal Functions ========== */\\n\\n    /**\\n     * @dev Conatains the business logic for the bridge via Wormhole\\n     * @param _wormholeData data specific to Wormhole\\n     */\\n    function _startBridge(WormholeData memory _wormholeData) internal {\\n        Storage storage s = getStorage();\\n\\n        // Check chain id\\n        require(block.chainid != _wormholeData.toChainId, \\\"Cannot bridge to the same network.\\\");\\n\\n        // Give Anyswap approval to bridge tokens\\n        LibAsset.approveERC20(IERC20(_wormholeData.token), s.wormholeRouter, _wormholeData.amount);\\n\\n        IWormholeRouter(s.wormholeRouter).transferTokens(\\n            _wormholeData.token,\\n            _wormholeData.amount,\\n            _wormholeData.toChainId,\\n            bytes32(uint256(uint160(_wormholeData.recipient))),\\n            0,\\n            _wormholeData.nonce\\n        );\\n    }\\n\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 namespace = NAMESPACE;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            s.slot := namespace\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IWormholeRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IWormholeRouter {\\n    function transferTokens(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 arbiterFee,\\n        uint32 nonce\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/Facets/NXTPFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ITransactionManager } from \\\"../Interfaces/ITransactionManager.sol\\\";\\nimport { ILiFi } from \\\"../Interfaces/ILiFi.sol\\\";\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { LibSwap } from \\\"../Libraries/LibSwap.sol\\\";\\nimport { LibDiamond } from \\\"../Libraries/LibDiamond.sol\\\";\\n\\ncontract NXTPFacet is ILiFi {\\n    /* ========== Storage ========== */\\n\\n    bytes32 internal constant NAMESPACE = keccak256(\\\"com.lifi.facets.nxtp\\\");\\n    struct Storage {\\n        ITransactionManager nxtpTxManager;\\n    }\\n\\n    /* ========== Events ========== */\\n\\n    event NXTPBridgeStarted(\\n        bytes32 indexed lifiTransactionId,\\n        bytes32 nxtpTransactionId,\\n        ITransactionManager.TransactionData txData\\n    );\\n\\n    /* ========== Init ========== */\\n\\n    function initNXTP(ITransactionManager _txMgrAddr) external {\\n        Storage storage s = getStorage();\\n        LibDiamond.enforceIsContractOwner();\\n        s.nxtpTxManager = _txMgrAddr;\\n    }\\n\\n    /* ========== Public Bridge Functions ========== */\\n\\n    /**\\n     * @notice This function starts a cross-chain transaction using the NXTP protocol\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _nxtpData data needed to complete an NXTP cross-chain transaction\\n     */\\n    function startBridgeTokensViaNXTP(LiFiData memory _lifiData, ITransactionManager.PrepareArgs memory _nxtpData)\\n        public\\n        payable\\n    {\\n        // Ensure sender has enough to complete the bridge transaction\\n        address sendingAssetId = _nxtpData.invariantData.sendingAssetId;\\n        if (sendingAssetId == address(0)) require(msg.value == _nxtpData.amount, \\\"ERR_INVALID_AMOUNT\\\");\\n        else {\\n            uint256 _sendingAssetIdBalance = LibAsset.getOwnBalance(sendingAssetId);\\n            LibAsset.transferFromERC20(sendingAssetId, msg.sender, address(this), _nxtpData.amount);\\n            require(\\n                LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance == _nxtpData.amount,\\n                \\\"ERR_INVALID_AMOUNT\\\"\\n            );\\n        }\\n\\n        // Start the bridge process\\n        _startBridge(_lifiData.transactionId, _nxtpData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice This function performs a swap or multiple swaps and then starts a cross-chain transaction\\n     *         using the NXTP protocol.\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _swapData array of data needed for swaps\\n     * @param _nxtpData data needed to complete an NXTP cross-chain transaction\\n     */\\n    function swapAndStartBridgeTokensViaNXTP(\\n        LiFiData memory _lifiData,\\n        LibSwap.SwapData[] calldata _swapData,\\n        ITransactionManager.PrepareArgs memory _nxtpData\\n    ) public payable {\\n        address sendingAssetId = _nxtpData.invariantData.sendingAssetId;\\n        uint256 _sendingAssetIdBalance = LibAsset.getOwnBalance(sendingAssetId);\\n\\n        // Swap\\n        for (uint8 i; i < _swapData.length; i++) {\\n            LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n        }\\n\\n        uint256 _postSwapBalance = LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance;\\n\\n        require(_postSwapBalance > 0, \\\"ERR_INVALID_AMOUNT\\\");\\n\\n        _nxtpData.amount = _postSwapBalance;\\n\\n        _startBridge(_lifiData.transactionId, _nxtpData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Completes a cross-chain transaction on the receiving chain using the NXTP protocol.\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param assetId token received on the receiving chain\\n     * @param receiver address that will receive the tokens\\n     * @param amount number of tokens received\\n     */\\n    function completeBridgeTokensViaNXTP(\\n        LiFiData memory _lifiData,\\n        address assetId,\\n        address receiver,\\n        uint256 amount\\n    ) public payable {\\n        if (LibAsset.isNativeAsset(assetId)) {\\n            require(msg.value == amount, \\\"INVALID_ETH_AMOUNT\\\");\\n        } else {\\n            require(msg.value == 0, \\\"ETH_WITH_ERC\\\");\\n            LibAsset.transferFromERC20(assetId, msg.sender, address(this), amount);\\n        }\\n\\n        LibAsset.transferAsset(assetId, payable(receiver), amount);\\n\\n        emit LiFiTransferCompleted(_lifiData.transactionId, assetId, receiver, amount, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Performs a swap before completing a cross-chain transaction\\n     *         on the receiving chain using the NXTP protocol.\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _swapData array of data needed for swaps\\n     * @param finalAssetId token received on the receiving chain\\n     * @param receiver address that will receive the tokens\\n     */\\n    function swapAndCompleteBridgeTokensViaNXTP(\\n        LiFiData memory _lifiData,\\n        LibSwap.SwapData[] calldata _swapData,\\n        address finalAssetId,\\n        address receiver\\n    ) public payable {\\n        uint256 startingBalance = LibAsset.getOwnBalance(finalAssetId);\\n\\n        // Swap\\n        for (uint8 i; i < _swapData.length; i++) {\\n            LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n        }\\n\\n        uint256 postSwapBalance = LibAsset.getOwnBalance(finalAssetId);\\n\\n        uint256 finalBalance;\\n\\n        if (postSwapBalance > startingBalance) {\\n            finalBalance = postSwapBalance - startingBalance;\\n            LibAsset.transferAsset(finalAssetId, payable(receiver), finalBalance);\\n        }\\n\\n        emit LiFiTransferCompleted(_lifiData.transactionId, finalAssetId, receiver, finalBalance, block.timestamp);\\n    }\\n\\n    /* ========== Internal Functions ========== */\\n\\n    function _startBridge(bytes32 _transactionId, ITransactionManager.PrepareArgs memory _nxtpData) internal {\\n        Storage storage s = getStorage();\\n        IERC20 sendingAssetId = IERC20(_nxtpData.invariantData.sendingAssetId);\\n\\n        // Give Connext approval to bridge tokens\\n        LibAsset.approveERC20(IERC20(sendingAssetId), address(s.nxtpTxManager), _nxtpData.amount);\\n\\n        uint256 value = LibAsset.isNativeAsset(address(sendingAssetId)) ? _nxtpData.amount : 0;\\n\\n        // Initiate bridge transaction on sending chain\\n        ITransactionManager.TransactionData memory result = s.nxtpTxManager.prepare{ value: value }(_nxtpData);\\n\\n        emit NXTPBridgeStarted(_transactionId, result.transactionId, result);\\n    }\\n\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 namespace = NAMESPACE;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            s.slot := namespace\\n        }\\n    }\\n\\n    /* ========== Getter Functions ========== */\\n\\n    /**\\n     * @notice show the NXTP transaction manager contract address\\n     */\\n    function getNXTPTransactionManager() external view returns (address) {\\n        Storage storage s = getStorage();\\n        return address(s.nxtpTxManager);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/ITransactionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.7;\\n\\ninterface ITransactionManager {\\n    // Structs\\n\\n    // Holds all data that is constant between sending and\\n    // receiving chains. The hash of this is what gets signed\\n    // to ensure the signature can be used on both chains.\\n    struct InvariantTransactionData {\\n        address receivingChainTxManagerAddress;\\n        address user;\\n        address router;\\n        address initiator; // msg.sender of sending side\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        address sendingChainFallback; // funds sent here on cancel\\n        address receivingAddress;\\n        address callTo;\\n        uint256 sendingChainId;\\n        uint256 receivingChainId;\\n        bytes32 callDataHash; // hashed to prevent free option\\n        bytes32 transactionId;\\n    }\\n\\n    // Holds all data that varies between sending and receiving\\n    // chains. The hash of this is stored onchain to ensure the\\n    // information passed in is valid.\\n    struct VariantTransactionData {\\n        uint256 amount;\\n        uint256 expiry;\\n        uint256 preparedBlockNumber;\\n    }\\n\\n    // All Transaction data, constant and variable\\n    struct TransactionData {\\n        address receivingChainTxManagerAddress;\\n        address user;\\n        address router;\\n        address initiator; // msg.sender of sending side\\n        address sendingAssetId;\\n        address receivingAssetId;\\n        address sendingChainFallback;\\n        address receivingAddress;\\n        address callTo;\\n        bytes32 callDataHash;\\n        bytes32 transactionId;\\n        uint256 sendingChainId;\\n        uint256 receivingChainId;\\n        uint256 amount;\\n        uint256 expiry;\\n        uint256 preparedBlockNumber; // Needed for removal of active blocks on fulfill/cancel\\n    }\\n\\n    // The structure of the signed data for fulfill\\n    struct SignedFulfillData {\\n        bytes32 transactionId;\\n        uint256 relayerFee;\\n        string functionIdentifier; // \\\"fulfill\\\" or \\\"cancel\\\"\\n        uint256 receivingChainId; // For domain separation\\n        address receivingChainTxManagerAddress; // For domain separation\\n    }\\n\\n    // The structure of the signed data for cancellation\\n    struct SignedCancelData {\\n        bytes32 transactionId;\\n        string functionIdentifier;\\n        uint256 receivingChainId;\\n        address receivingChainTxManagerAddress; // For domain separation\\n    }\\n\\n    /**\\n     * Arguments for calling prepare()\\n     * @param invariantData The data for a crosschain transaction that will\\n     *                      not change between sending and receiving chains.\\n     *                      The hash of this data is used as the key to store\\n     *                      the inforamtion that does change between chains\\n     *                      (amount,expiry,preparedBlock) for verification\\n     * @param amount The amount of the transaction on this chain\\n     * @param expiry The block.timestamp when the transaction will no longer be\\n     *               fulfillable and is freely cancellable on this chain\\n     * @param encryptedCallData The calldata to be executed when the tx is\\n     *                          fulfilled. Used in the function to allow the user\\n     *                          to reconstruct the tx from events. Hash is stored\\n     *                          onchain to prevent shenanigans.\\n     * @param encodedBid The encoded bid that was accepted by the user for this\\n     *                   crosschain transfer. It is supplied as a param to the\\n     *                   function but is only used in event emission\\n     * @param bidSignature The signature of the bidder on the encoded bid for\\n     *                     this transaction. Only used within the function for\\n     *                     event emission. The validity of the bid and\\n     *                     bidSignature are enforced offchain\\n     * @param encodedMeta The meta for the function\\n     */\\n    struct PrepareArgs {\\n        InvariantTransactionData invariantData;\\n        uint256 amount;\\n        uint256 expiry;\\n        bytes encryptedCallData;\\n        bytes encodedBid;\\n        bytes bidSignature;\\n        bytes encodedMeta;\\n    }\\n\\n    /**\\n     * @param txData All of the data (invariant and variant) for a crosschain\\n     *               transaction. The variant data provided is checked against\\n     *               what was stored when the `prepare` function was called.\\n     * @param relayerFee The fee that should go to the relayer when they are\\n     *                   calling the function on the receiving chain for the user\\n     * @param signature The users signature on the transaction id + fee that\\n     *                  can be used by the router to unlock the transaction on\\n     *                  the sending chain\\n     * @param callData The calldata to be sent to and executed by the\\n     *                 `FulfillHelper`\\n     * @param encodedMeta The meta for the function\\n     */\\n    struct FulfillArgs {\\n        TransactionData txData;\\n        uint256 relayerFee;\\n        bytes signature;\\n        bytes callData;\\n        bytes encodedMeta;\\n    }\\n\\n    /**\\n     * Arguments for calling cancel()\\n     * @param txData All of the data (invariant and variant) for a crosschain\\n     *               transaction. The variant data provided is checked against\\n     *               what was stored when the `prepare` function was called.\\n     * @param signature The user's signature that allows a transaction to be\\n     *                  cancelled by a relayer\\n     * @param encodedMeta The meta for the function\\n     */\\n    struct CancelArgs {\\n        TransactionData txData;\\n        bytes signature;\\n        bytes encodedMeta;\\n    }\\n\\n    // Adding/removing asset events\\n    event RouterAdded(address indexed addedRouter, address indexed caller);\\n\\n    event RouterRemoved(address indexed removedRouter, address indexed caller);\\n\\n    // Adding/removing router events\\n    event AssetAdded(address indexed addedAssetId, address indexed caller);\\n\\n    event AssetRemoved(address indexed removedAssetId, address indexed caller);\\n\\n    // Liquidity events\\n    event LiquidityAdded(address indexed router, address indexed assetId, uint256 amount, address caller);\\n\\n    event LiquidityRemoved(address indexed router, address indexed assetId, uint256 amount, address recipient);\\n\\n    // Transaction events\\n    event TransactionPrepared(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        TransactionData txData,\\n        address caller,\\n        PrepareArgs args\\n    );\\n\\n    event TransactionFulfilled(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        FulfillArgs args,\\n        bool success,\\n        bool isContract,\\n        bytes returnData,\\n        address caller\\n    );\\n\\n    event TransactionCancelled(\\n        address indexed user,\\n        address indexed router,\\n        bytes32 indexed transactionId,\\n        CancelArgs args,\\n        address caller\\n    );\\n\\n    // Getters\\n    function getChainId() external view returns (uint256);\\n\\n    function getStoredChainId() external view returns (uint256);\\n\\n    // Owner only methods\\n    function addRouter(address router) external;\\n\\n    function removeRouter(address router) external;\\n\\n    function addAssetId(address assetId) external;\\n\\n    function removeAssetId(address assetId) external;\\n\\n    // Router only methods\\n    function addLiquidityFor(\\n        uint256 amount,\\n        address assetId,\\n        address router\\n    ) external payable;\\n\\n    function addLiquidity(uint256 amount, address assetId) external payable;\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        address assetId,\\n        address payable recipient\\n    ) external;\\n\\n    // Methods for crosschain transfers\\n    // called in the following order (in happy case)\\n    // 1. prepare by user on sending chain\\n    // 2. prepare by router on receiving chain\\n    // 3. fulfill by user on receiving chain\\n    // 4. fulfill by router on sending chain\\n    function prepare(PrepareArgs calldata args) external payable returns (TransactionData memory);\\n\\n    function fulfill(FulfillArgs calldata args) external returns (TransactionData memory);\\n\\n    function cancel(CancelArgs calldata args) external returns (TransactionData memory);\\n}\\n\"\r\n    },\r\n    \"src/LiFiDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { LibDiamond } from \\\"./Libraries/LibDiamond.sol\\\";\\nimport { IDiamondCut } from \\\"./Interfaces/IDiamondCut.sol\\\";\\n\\ncontract LiFiDiamond {\\n    constructor(address _contractOwner, address _diamondCutFacet) payable {\\n        LibDiamond.setContractOwner(_contractOwner);\\n\\n        // Add the diamondCut external function from the diamondCutFacet\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\n        bytes4[] memory functionSelectors = new bytes4[](1);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n            facetAddress: _diamondCutFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: functionSelectors\\n        });\\n        LibDiamond.diamondCut(cut, address(0), \\\"\\\");\\n    }\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    // solhint-disable-next-line no-complex-fallback\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n\\n        // get diamond storage\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            ds.slot := position\\n        }\\n\\n        // get facet from function selector\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n\\n        // Execute external function from facet using delegatecall and return any value.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // copy function selector and any arguments\\n            calldatacopy(0, 0, calldatasize())\\n            // execute function call using the facet\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            // get any return value\\n            returndatacopy(0, 0, returndatasize())\\n            // return any return value or error back to the caller\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    // Able to receive ether\\n    // solhint-disable-next-line no-empty-blocks\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"src/Facets/DiamondCutFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IDiamondCut } from \\\"../Interfaces/IDiamondCut.sol\\\";\\nimport { LibDiamond } from \\\"../Libraries/LibDiamond.sol\\\";\\n\\ncontract DiamondCutFacet is IDiamondCut {\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Facets/WithdrawFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { LibDiamond } from \\\"../Libraries/LibDiamond.sol\\\";\\n\\ncontract WithdrawFacet {\\n    using SafeERC20 for IERC20;\\n    address private constant NATIVE_ASSET = address(0);\\n\\n    event LogWithdraw(address indexed _assetAddress, address _from, uint256 amount);\\n\\n    /**\\n     * @dev Withdraw asset.\\n     * @param _assetAddress Asset to be withdrawn.\\n     * @param _to address to withdraw to.\\n     * @param _amount amount of asset to withdraw.\\n     */\\n    function withdraw(\\n        address _assetAddress,\\n        address _to,\\n        uint256 _amount\\n    ) public {\\n        LibDiamond.enforceIsContractOwner();\\n        address sendTo = (_to == address(0)) ? msg.sender : _to;\\n        uint256 assetBalance;\\n        if (_assetAddress == NATIVE_ASSET) {\\n            address self = address(this); // workaround for a possible solidity bug\\n            assert(_amount <= self.balance);\\n            payable(sendTo).transfer(_amount);\\n        } else {\\n            assetBalance = IERC20(_assetAddress).balanceOf(address(this));\\n            assert(_amount <= assetBalance);\\n            IERC20(_assetAddress).safeTransfer(sendTo, _amount);\\n        }\\n        emit LogWithdraw(sendTo, _assetAddress, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Test/WormholeRouter.sol\": {\r\n      \"content\": \"// solhint-disable\\n// contracts/Bridge.sol\\n// SPDX-License-Identifier: Apache 2\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ninterface Structs {\\n    struct Provider {\\n        uint16 chainId;\\n        uint16 governanceChainId;\\n        bytes32 governanceContract;\\n    }\\n\\n    struct GuardianSet {\\n        address[] keys;\\n        uint32 expirationTime;\\n    }\\n\\n    struct Signature {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        uint8 guardianIndex;\\n    }\\n\\n    struct VM {\\n        uint8 version;\\n        uint32 timestamp;\\n        uint32 nonce;\\n        uint16 emitterChainId;\\n        bytes32 emitterAddress;\\n        uint64 sequence;\\n        uint8 consistencyLevel;\\n        bytes payload;\\n        uint32 guardianSetIndex;\\n        Signature[] signatures;\\n        bytes32 hash;\\n    }\\n}\\n\\ninterface IWormhole is Structs {\\n    event LogMessagePublished(\\n        address indexed sender,\\n        uint64 sequence,\\n        uint32 nonce,\\n        bytes payload,\\n        uint8 consistencyLevel\\n    );\\n\\n    function publishMessage(\\n        uint32 nonce,\\n        bytes memory payload,\\n        uint8 consistencyLevel\\n    ) external payable returns (uint64 sequence);\\n\\n    function parseAndVerifyVM(bytes calldata encodedVM)\\n        external\\n        view\\n        returns (\\n            Structs.VM memory vm,\\n            bool valid,\\n            string memory reason\\n        );\\n\\n    function verifyVM(Structs.VM memory vm) external view returns (bool valid, string memory reason);\\n\\n    function verifySignatures(\\n        bytes32 hash,\\n        Structs.Signature[] memory signatures,\\n        Structs.GuardianSet memory guardianSet\\n    ) external pure returns (bool valid, string memory reason);\\n\\n    function parseVM(bytes memory encodedVM) external pure returns (Structs.VM memory vm);\\n\\n    function getGuardianSet(uint32 index) external view returns (Structs.GuardianSet memory);\\n\\n    function getCurrentGuardianSetIndex() external view returns (uint32);\\n\\n    function getGuardianSetExpiry() external view returns (uint32);\\n\\n    function governanceActionIsConsumed(bytes32 hash) external view returns (bool);\\n\\n    function isInitialized(address impl) external view returns (bool);\\n\\n    function chainId() external view returns (uint16);\\n\\n    function governanceChainId() external view returns (uint16);\\n\\n    function governanceContract() external view returns (bytes32);\\n\\n    function messageFee() external view returns (uint256);\\n}\\n\\ncontract BridgeStorage {\\n    struct Provider {\\n        uint16 chainId;\\n        uint16 governanceChainId;\\n        bytes32 governanceContract;\\n        address WETH;\\n    }\\n\\n    struct Asset {\\n        uint16 chainId;\\n        bytes32 assetAddress;\\n    }\\n\\n    struct State {\\n        address payable wormhole;\\n        address tokenImplementation;\\n        Provider provider;\\n        // Mapping of consumed governance actions\\n        mapping(bytes32 => bool) consumedGovernanceActions;\\n        // Mapping of consumed token transfers\\n        mapping(bytes32 => bool) completedTransfers;\\n        // Mapping of initialized implementations\\n        mapping(address => bool) initializedImplementations;\\n        // Mapping of wrapped assets (chainID => nativeAddress => wrappedAddress)\\n        mapping(uint16 => mapping(bytes32 => address)) wrappedAssets;\\n        // Mapping to safely identify wrapped assets\\n        mapping(address => bool) isWrappedAsset;\\n        // Mapping of native assets to amount outstanding on other chains\\n        mapping(address => uint256) outstandingBridged;\\n        // Mapping of bridge contracts on other chains\\n        mapping(uint16 => bytes32) bridgeImplementations;\\n    }\\n}\\n\\ncontract BridgeState {\\n    BridgeStorage.State _state;\\n}\\n\\ncontract BridgeToken is BeaconProxy {\\n    constructor(address beacon, bytes memory data) BeaconProxy(beacon, data) {}\\n}\\n\\ncontract TokenStorage {\\n    struct State {\\n        string name;\\n        string symbol;\\n        uint64 metaLastUpdatedSequence;\\n        uint256 totalSupply;\\n        uint8 decimals;\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        address owner;\\n        bool initialized;\\n        uint16 chainId;\\n        bytes32 nativeContract;\\n    }\\n}\\n\\ncontract TokenState {\\n    TokenStorage.State _state;\\n}\\n\\n// Based on the OpenZepplin ERC20 implementation, licensed under MIT\\ncontract TokenImplementation is TokenState, Context {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_,\\n        uint64 sequence_,\\n        address owner_,\\n        uint16 chainId_,\\n        bytes32 nativeContract_\\n    ) public initializer {\\n        _state.name = name_;\\n        _state.symbol = symbol_;\\n        _state.decimals = decimals_;\\n        _state.metaLastUpdatedSequence = sequence_;\\n\\n        _state.owner = owner_;\\n\\n        _state.chainId = chainId_;\\n        _state.nativeContract = nativeContract_;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return string(abi.encodePacked(_state.name, \\\" (Wormhole)\\\"));\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _state.symbol;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _state.owner;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _state.decimals;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _state.totalSupply;\\n    }\\n\\n    function chainId() public view returns (uint16) {\\n        return _state.chainId;\\n    }\\n\\n    function nativeContract() public view returns (bytes32) {\\n        return _state.nativeContract;\\n    }\\n\\n    function balanceOf(address account_) public view returns (uint256) {\\n        return _state.balances[account_];\\n    }\\n\\n    function transfer(address recipient_, uint256 amount_) public returns (bool) {\\n        _transfer(_msgSender(), recipient_, amount_);\\n        return true;\\n    }\\n\\n    function allowance(address owner_, address spender_) public view returns (uint256) {\\n        return _state.allowances[owner_][spender_];\\n    }\\n\\n    function approve(address spender_, uint256 amount_) public returns (bool) {\\n        _approve(_msgSender(), spender_, amount_);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender_,\\n        address recipient_,\\n        uint256 amount_\\n    ) public returns (bool) {\\n        _transfer(sender_, recipient_, amount_);\\n\\n        uint256 currentAllowance = _state.allowances[sender_][_msgSender()];\\n        require(currentAllowance >= amount_, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender_, _msgSender(), currentAllowance - amount_);\\n\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender_, uint256 addedValue_) public returns (bool) {\\n        _approve(_msgSender(), spender_, _state.allowances[_msgSender()][spender_] + addedValue_);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender_, uint256 subtractedValue_) public returns (bool) {\\n        uint256 currentAllowance = _state.allowances[_msgSender()][spender_];\\n        require(currentAllowance >= subtractedValue_, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender_, currentAllowance - subtractedValue_);\\n\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender_,\\n        address recipient_,\\n        uint256 amount_\\n    ) internal {\\n        require(sender_ != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient_ != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 senderBalance = _state.balances[sender_];\\n        require(senderBalance >= amount_, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _state.balances[sender_] = senderBalance - amount_;\\n        _state.balances[recipient_] += amount_;\\n\\n        emit Transfer(sender_, recipient_, amount_);\\n    }\\n\\n    function mint(address account_, uint256 amount_) public onlyOwner {\\n        _mint(account_, amount_);\\n    }\\n\\n    function _mint(address account_, uint256 amount_) internal {\\n        require(account_ != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _state.totalSupply += amount_;\\n        _state.balances[account_] += amount_;\\n        emit Transfer(address(0), account_, amount_);\\n    }\\n\\n    function burn(address account_, uint256 amount_) public onlyOwner {\\n        _burn(account_, amount_);\\n    }\\n\\n    function _burn(address account_, uint256 amount_) internal {\\n        require(account_ != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        uint256 accountBalance = _state.balances[account_];\\n        require(accountBalance >= amount_, \\\"ERC20: burn amount exceeds balance\\\");\\n        _state.balances[account_] = accountBalance - amount_;\\n        _state.totalSupply -= amount_;\\n\\n        emit Transfer(account_, address(0), amount_);\\n    }\\n\\n    function _approve(\\n        address owner_,\\n        address spender_,\\n        uint256 amount_\\n    ) internal virtual {\\n        require(owner_ != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender_ != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _state.allowances[owner_][spender_] = amount_;\\n        emit Approval(owner_, spender_, amount_);\\n    }\\n\\n    function updateDetails(\\n        string memory name_,\\n        string memory symbol_,\\n        uint64 sequence_\\n    ) public onlyOwner {\\n        require(_state.metaLastUpdatedSequence < sequence_, \\\"current metadata is up to date\\\");\\n\\n        _state.name = name_;\\n        _state.symbol = symbol_;\\n        _state.metaLastUpdatedSequence = sequence_;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier initializer() {\\n        require(!_state.initialized, \\\"Already initialized\\\");\\n\\n        _state.initialized = true;\\n\\n        _;\\n    }\\n}\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\\ncontract BridgeGetters is BridgeState {\\n    function governanceActionIsConsumed(bytes32 hash) public view returns (bool) {\\n        return _state.consumedGovernanceActions[hash];\\n    }\\n\\n    function isInitialized(address impl) public view returns (bool) {\\n        return _state.initializedImplementations[impl];\\n    }\\n\\n    function isTransferCompleted(bytes32 hash) public view returns (bool) {\\n        return _state.completedTransfers[hash];\\n    }\\n\\n    function wormhole() public view returns (IWormhole) {\\n        return IWormhole(_state.wormhole);\\n    }\\n\\n    function chainId() public view returns (uint16) {\\n        return _state.provider.chainId;\\n    }\\n\\n    function governanceChainId() public view returns (uint16) {\\n        return _state.provider.governanceChainId;\\n    }\\n\\n    function governanceContract() public view returns (bytes32) {\\n        return _state.provider.governanceContract;\\n    }\\n\\n    function wrappedAsset(uint16 tokenChainId, bytes32 tokenAddress) public view returns (address) {\\n        return _state.wrappedAssets[tokenChainId][tokenAddress];\\n    }\\n\\n    function bridgeContracts(uint16 chainId_) public view returns (bytes32) {\\n        return _state.bridgeImplementations[chainId_];\\n    }\\n\\n    function tokenImplementation() public view returns (address) {\\n        return _state.tokenImplementation;\\n    }\\n\\n    function WETH() public view returns (IWETH) {\\n        return IWETH(_state.provider.WETH);\\n    }\\n\\n    function outstandingBridged(address token) public view returns (uint256) {\\n        return _state.outstandingBridged[token];\\n    }\\n\\n    function isWrappedAsset(address token) public view returns (bool) {\\n        return _state.isWrappedAsset[token];\\n    }\\n}\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\\ncontract BridgeSetters is BridgeState {\\n    function setInitialized(address implementatiom) internal {\\n        _state.initializedImplementations[implementatiom] = true;\\n    }\\n\\n    function setGovernanceActionConsumed(bytes32 hash) internal {\\n        _state.consumedGovernanceActions[hash] = true;\\n    }\\n\\n    function setTransferCompleted(bytes32 hash) internal {\\n        _state.completedTransfers[hash] = true;\\n    }\\n\\n    function setChainId(uint16 chainId) internal {\\n        _state.provider.chainId = chainId;\\n    }\\n\\n    function setGovernanceChainId(uint16 chainId) internal {\\n        _state.provider.governanceChainId = chainId;\\n    }\\n\\n    function setGovernanceContract(bytes32 governanceContract) internal {\\n        _state.provider.governanceContract = governanceContract;\\n    }\\n\\n    function setBridgeImplementation(uint16 chainId, bytes32 bridgeContract) internal {\\n        _state.bridgeImplementations[chainId] = bridgeContract;\\n    }\\n\\n    function setTokenImplementation(address impl) internal {\\n        _state.tokenImplementation = impl;\\n    }\\n\\n    function setWETH(address weth) internal {\\n        _state.provider.WETH = weth;\\n    }\\n\\n    function setWormhole(address wh) internal {\\n        _state.wormhole = payable(wh);\\n    }\\n\\n    function setWrappedAsset(\\n        uint16 tokenChainId,\\n        bytes32 tokenAddress,\\n        address wrapper\\n    ) internal {\\n        _state.wrappedAssets[tokenChainId][tokenAddress] = wrapper;\\n        _state.isWrappedAsset[wrapper] = true;\\n    }\\n\\n    function setOutstandingBridged(address token, uint256 outstanding) internal {\\n        _state.outstandingBridged[token] = outstanding;\\n    }\\n}\\n\\ncontract BridgeStructs {\\n    struct Transfer {\\n        // PayloadID uint8 = 1\\n        uint8 payloadID;\\n        // Amount being transferred (big-endian uint256)\\n        uint256 amount;\\n        // Address of the token. Left-zero-padded if shorter than 32 bytes\\n        bytes32 tokenAddress;\\n        // Chain ID of the token\\n        uint16 tokenChain;\\n        // Address of the recipient. Left-zero-padded if shorter than 32 bytes\\n        bytes32 to;\\n        // Chain ID of the recipient\\n        uint16 toChain;\\n        // Amount of tokens (big-endian uint256) that the user is willing to pay as relayer fee. Must be <= Amount.\\n        uint256 fee;\\n    }\\n\\n    struct AssetMeta {\\n        // PayloadID uint8 = 2\\n        uint8 payloadID;\\n        // Address of the token. Left-zero-padded if shorter than 32 bytes\\n        bytes32 tokenAddress;\\n        // Chain ID of the token\\n        uint16 tokenChain;\\n        // Number of decimals of the token (big-endian uint256)\\n        uint8 decimals;\\n        // Symbol of the token (UTF-8)\\n        bytes32 symbol;\\n        // Name of the token (UTF-8)\\n        bytes32 name;\\n    }\\n\\n    struct RegisterChain {\\n        // Governance Header\\n        // module: \\\"TokenBridge\\\" left-padded\\n        bytes32 module;\\n        // governance action: 1\\n        uint8 action;\\n        // governance paket chain id: this or 0\\n        uint16 chainId;\\n        // Chain ID\\n        uint16 emitterChainID;\\n        // Emitter address. Left-zero-padded if shorter than 32 bytes\\n        bytes32 emitterAddress;\\n    }\\n\\n    struct UpgradeContract {\\n        // Governance Header\\n        // module: \\\"TokenBridge\\\" left-padded\\n        bytes32 module;\\n        // governance action: 2\\n        uint8 action;\\n        // governance paket chain id\\n        uint16 chainId;\\n        // Address of the new contract\\n        bytes32 newContract;\\n    }\\n}\\n\\ncontract BridgeGovernance is BridgeGetters, BridgeSetters, ERC1967Upgrade {\\n    using BytesLib for bytes;\\n\\n    // \\\"TokenBridge\\\" (left padded)\\n    bytes32 constant module = 0x000000000000000000000000000000000000000000546f6b656e427269646765;\\n\\n    // Execute a RegisterChain governance message\\n    function registerChain(bytes memory encodedVM) public {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = verifyGovernanceVM(encodedVM);\\n        require(valid, reason);\\n\\n        setGovernanceActionConsumed(vm.hash);\\n\\n        BridgeStructs.RegisterChain memory chain = parseRegisterChain(vm.payload);\\n\\n        require(chain.chainId == chainId() || chain.chainId == 0, \\\"invalid chain id\\\");\\n        require(bridgeContracts(chain.emitterChainID) == bytes32(0), \\\"chain already registered\\\");\\n\\n        setBridgeImplementation(chain.emitterChainID, chain.emitterAddress);\\n    }\\n\\n    // Execute a UpgradeContract governance message\\n    function upgrade(bytes memory encodedVM) public {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = verifyGovernanceVM(encodedVM);\\n        require(valid, reason);\\n\\n        setGovernanceActionConsumed(vm.hash);\\n\\n        BridgeStructs.UpgradeContract memory implementation = parseUpgrade(vm.payload);\\n\\n        require(implementation.chainId == chainId(), \\\"wrong chain id\\\");\\n\\n        upgradeImplementation(address(uint160(uint256(implementation.newContract))));\\n    }\\n\\n    function verifyGovernanceVM(bytes memory encodedVM)\\n        internal\\n        view\\n        returns (\\n            IWormhole.VM memory parsedVM,\\n            bool isValid,\\n            string memory invalidReason\\n        )\\n    {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole().parseAndVerifyVM(encodedVM);\\n\\n        if (!valid) {\\n            return (vm, valid, reason);\\n        }\\n\\n        if (vm.emitterChainId != governanceChainId()) {\\n            return (vm, false, \\\"wrong governance chain\\\");\\n        }\\n        if (vm.emitterAddress != governanceContract()) {\\n            return (vm, false, \\\"wrong governance contract\\\");\\n        }\\n\\n        if (governanceActionIsConsumed(vm.hash)) {\\n            return (vm, false, \\\"governance action already consumed\\\");\\n        }\\n\\n        return (vm, true, \\\"\\\");\\n    }\\n\\n    event ContractUpgraded(address indexed oldContract, address indexed newContract);\\n\\n    function upgradeImplementation(address newImplementation) internal {\\n        address currentImplementation = _getImplementation();\\n\\n        _upgradeTo(newImplementation);\\n\\n        // Call initialize function of the new implementation\\n        (bool success, bytes memory reason) = newImplementation.delegatecall(abi.encodeWithSignature(\\\"initialize()\\\"));\\n\\n        require(success, string(reason));\\n\\n        emit ContractUpgraded(currentImplementation, newImplementation);\\n    }\\n\\n    function parseRegisterChain(bytes memory encoded) public pure returns (BridgeStructs.RegisterChain memory chain) {\\n        uint256 index = 0;\\n\\n        // governance header\\n\\n        chain.module = encoded.toBytes32(index);\\n        index += 32;\\n        require(chain.module == module, \\\"invalid RegisterChain: wrong module\\\");\\n\\n        chain.action = encoded.toUint8(index);\\n        index += 1;\\n        require(chain.action == 1, \\\"invalid RegisterChain: wrong action\\\");\\n\\n        chain.chainId = encoded.toUint16(index);\\n        index += 2;\\n\\n        // payload\\n\\n        chain.emitterChainID = encoded.toUint16(index);\\n        index += 2;\\n\\n        chain.emitterAddress = encoded.toBytes32(index);\\n        index += 32;\\n\\n        require(encoded.length == index, \\\"invalid RegisterChain: wrong length\\\");\\n    }\\n\\n    function parseUpgrade(bytes memory encoded) public pure returns (BridgeStructs.UpgradeContract memory chain) {\\n        uint256 index = 0;\\n\\n        // governance header\\n\\n        chain.module = encoded.toBytes32(index);\\n        index += 32;\\n        require(chain.module == module, \\\"invalid UpgradeContract: wrong module\\\");\\n\\n        chain.action = encoded.toUint8(index);\\n        index += 1;\\n        require(chain.action == 2, \\\"invalid UpgradeContract: wrong action\\\");\\n\\n        chain.chainId = encoded.toUint16(index);\\n        index += 2;\\n\\n        // payload\\n\\n        chain.newContract = encoded.toBytes32(index);\\n        index += 32;\\n\\n        require(encoded.length == index, \\\"invalid UpgradeContract: wrong length\\\");\\n    }\\n}\\n\\ncontract Bridge is BridgeGovernance {\\n    using BytesLib for bytes;\\n\\n    // Produce a AssetMeta message for a given token\\n    function attestToken(address tokenAddress, uint32 nonce) public payable returns (uint64 sequence) {\\n        // decimals, symbol & token are not part of the core ERC20 token standard, so we need to support contracts that dont implement them\\n        (, bytes memory queriedDecimals) = tokenAddress.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n        (, bytes memory queriedSymbol) = tokenAddress.staticcall(abi.encodeWithSignature(\\\"symbol()\\\"));\\n        (, bytes memory queriedName) = tokenAddress.staticcall(abi.encodeWithSignature(\\\"name()\\\"));\\n\\n        uint8 decimals = abi.decode(queriedDecimals, (uint8));\\n\\n        string memory symbolString = abi.decode(queriedSymbol, (string));\\n        string memory nameString = abi.decode(queriedName, (string));\\n\\n        bytes32 symbol;\\n        bytes32 name;\\n        assembly {\\n            // first 32 bytes hold string length\\n            symbol := mload(add(symbolString, 32))\\n            name := mload(add(nameString, 32))\\n        }\\n\\n        BridgeStructs.AssetMeta memory meta = BridgeStructs.AssetMeta({\\n            payloadID: 2,\\n            tokenAddress: bytes32(uint256(uint160(tokenAddress))),\\n            tokenChain: chainId(),\\n            decimals: decimals,\\n            symbol: symbol,\\n            name: name\\n        });\\n\\n        bytes memory encoded = encodeAssetMeta(meta);\\n\\n        sequence = wormhole().publishMessage{ value: msg.value }(nonce, encoded, 15);\\n    }\\n\\n    function wrapAndTransferETH(\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 arbiterFee,\\n        uint32 nonce\\n    ) public payable returns (uint64 sequence) {\\n        uint256 wormholeFee = wormhole().messageFee();\\n\\n        require(wormholeFee < msg.value, \\\"value is smaller than wormhole fee\\\");\\n\\n        uint256 amount = msg.value - wormholeFee;\\n\\n        require(arbiterFee <= amount, \\\"fee is bigger than amount minus wormhole fee\\\");\\n\\n        uint256 normalizedAmount = normalizeAmount(amount, 18);\\n        uint256 normalizedArbiterFee = normalizeAmount(arbiterFee, 18);\\n\\n        // refund dust\\n        uint256 dust = amount - deNormalizeAmount(normalizedAmount, 18);\\n        if (dust > 0) {\\n            payable(msg.sender).transfer(dust);\\n        }\\n\\n        // deposit into WETH\\n        WETH().deposit{ value: amount - dust }();\\n\\n        // track and check outstanding token amounts\\n        bridgeOut(address(WETH()), normalizedAmount);\\n\\n        sequence = logTransfer(\\n            chainId(),\\n            bytes32(uint256(uint160(address(WETH())))),\\n            normalizedAmount,\\n            recipientChain,\\n            recipient,\\n            normalizedArbiterFee,\\n            wormholeFee,\\n            nonce\\n        );\\n    }\\n\\n    // Initiate a Transfer\\n    function transferTokens(\\n        address token,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 arbiterFee,\\n        uint32 nonce\\n    ) public payable returns (uint64 sequence) {\\n        // determine token parameters\\n        uint16 tokenChain;\\n        bytes32 tokenAddress;\\n        if (isWrappedAsset(token)) {\\n            tokenChain = TokenImplementation(token).chainId();\\n            tokenAddress = TokenImplementation(token).nativeContract();\\n        } else {\\n            tokenChain = chainId();\\n            tokenAddress = bytes32(uint256(uint160(token)));\\n        }\\n\\n        // query tokens decimals\\n        (, bytes memory queriedDecimals) = token.staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n        uint8 decimals = abi.decode(queriedDecimals, (uint8));\\n\\n        // don't deposit dust that can not be bridged due to the decimal shift\\n        amount = deNormalizeAmount(normalizeAmount(amount, decimals), decimals);\\n\\n        if (tokenChain == chainId()) {\\n            // query own token balance before transfer\\n            (, bytes memory queriedBalanceBefore) = token.staticcall(\\n                abi.encodeWithSelector(IERC20.balanceOf.selector, address(this))\\n            );\\n            uint256 balanceBefore = abi.decode(queriedBalanceBefore, (uint256));\\n\\n            // transfer tokens\\n            SafeERC20.safeTransferFrom(IERC20(token), msg.sender, address(this), amount);\\n\\n            // query own token balance after transfer\\n            (, bytes memory queriedBalanceAfter) = token.staticcall(\\n                abi.encodeWithSelector(IERC20.balanceOf.selector, address(this))\\n            );\\n            uint256 balanceAfter = abi.decode(queriedBalanceAfter, (uint256));\\n\\n            // correct amount for potential transfer fees\\n            amount = balanceAfter - balanceBefore;\\n        } else {\\n            SafeERC20.safeTransferFrom(IERC20(token), msg.sender, address(this), amount);\\n\\n            TokenImplementation(token).burn(address(this), amount);\\n        }\\n\\n        // normalize amounts decimals\\n        uint256 normalizedAmount = normalizeAmount(amount, decimals);\\n        uint256 normalizedArbiterFee = normalizeAmount(arbiterFee, decimals);\\n\\n        // track and check outstanding token amounts\\n        if (tokenChain == chainId()) {\\n            bridgeOut(token, normalizedAmount);\\n        }\\n\\n        sequence = logTransfer(\\n            tokenChain,\\n            tokenAddress,\\n            normalizedAmount,\\n            recipientChain,\\n            recipient,\\n            normalizedArbiterFee,\\n            msg.value,\\n            nonce\\n        );\\n    }\\n\\n    function normalizeAmount(uint256 amount, uint8 decimals) internal pure returns (uint256) {\\n        if (decimals > 8) {\\n            amount /= 10**(decimals - 8);\\n        }\\n        return amount;\\n    }\\n\\n    function deNormalizeAmount(uint256 amount, uint8 decimals) internal pure returns (uint256) {\\n        if (decimals > 8) {\\n            amount *= 10**(decimals - 8);\\n        }\\n        return amount;\\n    }\\n\\n    function logTransfer(\\n        uint16 tokenChain,\\n        bytes32 tokenAddress,\\n        uint256 amount,\\n        uint16 recipientChain,\\n        bytes32 recipient,\\n        uint256 fee,\\n        uint256 callValue,\\n        uint32 nonce\\n    ) internal returns (uint64 sequence) {\\n        require(fee <= amount, \\\"fee exceeds amount\\\");\\n\\n        BridgeStructs.Transfer memory transfer = BridgeStructs.Transfer({\\n            payloadID: 1,\\n            amount: amount,\\n            tokenAddress: tokenAddress,\\n            tokenChain: tokenChain,\\n            to: recipient,\\n            toChain: recipientChain,\\n            fee: fee\\n        });\\n\\n        bytes memory encoded = encodeTransfer(transfer);\\n\\n        // for testing purposes, as arbiter fee is zero\\n        /*sequence = wormhole().publishMessage{\\n            value : callValue\\n        }(nonce, encoded, 15);*/\\n    }\\n\\n    function updateWrapped(bytes memory encodedVm) external returns (address token) {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole().parseAndVerifyVM(encodedVm);\\n\\n        require(valid, reason);\\n        require(verifyBridgeVM(vm), \\\"invalid emitter\\\");\\n\\n        BridgeStructs.AssetMeta memory meta = parseAssetMeta(vm.payload);\\n        return _updateWrapped(meta, vm.sequence);\\n    }\\n\\n    function _updateWrapped(BridgeStructs.AssetMeta memory meta, uint64 sequence) internal returns (address token) {\\n        address wrapped = wrappedAsset(meta.tokenChain, meta.tokenAddress);\\n        require(wrapped != address(0), \\\"wrapped asset does not exists\\\");\\n\\n        // Update metadata\\n        TokenImplementation(wrapped).updateDetails(bytes32ToString(meta.name), bytes32ToString(meta.symbol), sequence);\\n\\n        return wrapped;\\n    }\\n\\n    function createWrapped(bytes memory encodedVm) external returns (address token) {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole().parseAndVerifyVM(encodedVm);\\n\\n        require(valid, reason);\\n        require(verifyBridgeVM(vm), \\\"invalid emitter\\\");\\n\\n        BridgeStructs.AssetMeta memory meta = parseAssetMeta(vm.payload);\\n        return _createWrapped(meta, vm.sequence);\\n    }\\n\\n    // Creates a wrapped asset using AssetMeta\\n    function _createWrapped(BridgeStructs.AssetMeta memory meta, uint64 sequence) internal returns (address token) {\\n        require(meta.tokenChain != chainId(), \\\"can only wrap tokens from foreign chains\\\");\\n        require(wrappedAsset(meta.tokenChain, meta.tokenAddress) == address(0), \\\"wrapped asset already exists\\\");\\n\\n        // initialize the TokenImplementation\\n        bytes memory initialisationArgs = abi.encodeWithSelector(\\n            TokenImplementation.initialize.selector,\\n            bytes32ToString(meta.name),\\n            bytes32ToString(meta.symbol),\\n            meta.decimals,\\n            sequence,\\n            address(this),\\n            meta.tokenChain,\\n            meta.tokenAddress\\n        );\\n\\n        // initialize the BeaconProxy\\n        bytes memory constructorArgs = abi.encode(address(this), initialisationArgs);\\n\\n        // deployment code\\n        bytes memory bytecode = abi.encodePacked(type(BridgeToken).creationCode, constructorArgs);\\n\\n        bytes32 salt = keccak256(abi.encodePacked(meta.tokenChain, meta.tokenAddress));\\n\\n        assembly {\\n            token := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\\n\\n            if iszero(extcodesize(token)) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        setWrappedAsset(meta.tokenChain, meta.tokenAddress, token);\\n    }\\n\\n    function completeTransfer(bytes memory encodedVm) public {\\n        _completeTransfer(encodedVm, false);\\n    }\\n\\n    function completeTransferAndUnwrapETH(bytes memory encodedVm) public {\\n        _completeTransfer(encodedVm, true);\\n    }\\n\\n    // Execute a Transfer message\\n    function _completeTransfer(bytes memory encodedVm, bool unwrapWETH) internal {\\n        (IWormhole.VM memory vm, bool valid, string memory reason) = wormhole().parseAndVerifyVM(encodedVm);\\n\\n        require(valid, reason);\\n        require(verifyBridgeVM(vm), \\\"invalid emitter\\\");\\n\\n        BridgeStructs.Transfer memory transfer = parseTransfer(vm.payload);\\n\\n        require(!isTransferCompleted(vm.hash), \\\"transfer already completed\\\");\\n        setTransferCompleted(vm.hash);\\n\\n        require(transfer.toChain == chainId(), \\\"invalid target chain\\\");\\n\\n        IERC20 transferToken;\\n        if (transfer.tokenChain == chainId()) {\\n            transferToken = IERC20(address(uint160(uint256(transfer.tokenAddress))));\\n\\n            // track outstanding token amounts\\n            bridgedIn(address(transferToken), transfer.amount);\\n        } else {\\n            address wrapped = wrappedAsset(transfer.tokenChain, transfer.tokenAddress);\\n            require(wrapped != address(0), \\\"no wrapper for this token created yet\\\");\\n\\n            transferToken = IERC20(wrapped);\\n        }\\n\\n        require(\\n            unwrapWETH == false || address(transferToken) == address(WETH()),\\n            \\\"invalid token, can only unwrap WETH\\\"\\n        );\\n\\n        // query decimals\\n        (, bytes memory queriedDecimals) = address(transferToken).staticcall(abi.encodeWithSignature(\\\"decimals()\\\"));\\n        uint8 decimals = abi.decode(queriedDecimals, (uint8));\\n\\n        // adjust decimals\\n        uint256 nativeAmount = deNormalizeAmount(transfer.amount, decimals);\\n        uint256 nativeFee = deNormalizeAmount(transfer.fee, decimals);\\n\\n        // transfer fee to arbiter\\n        if (nativeFee > 0) {\\n            require(nativeFee <= nativeAmount, \\\"fee higher than transferred amount\\\");\\n\\n            if (unwrapWETH) {\\n                WETH().withdraw(nativeFee);\\n\\n                payable(msg.sender).transfer(nativeFee);\\n            } else {\\n                if (transfer.tokenChain != chainId()) {\\n                    // mint wrapped asset\\n                    TokenImplementation(address(transferToken)).mint(msg.sender, nativeFee);\\n                } else {\\n                    SafeERC20.safeTransfer(transferToken, msg.sender, nativeFee);\\n                }\\n            }\\n        }\\n\\n        // transfer bridged amount to recipient\\n        uint256 transferAmount = nativeAmount - nativeFee;\\n        address transferRecipient = address(uint160(uint256(transfer.to)));\\n\\n        if (unwrapWETH) {\\n            WETH().withdraw(transferAmount);\\n\\n            payable(transferRecipient).transfer(transferAmount);\\n        } else {\\n            if (transfer.tokenChain != chainId()) {\\n                // mint wrapped asset\\n                TokenImplementation(address(transferToken)).mint(transferRecipient, transferAmount);\\n            } else {\\n                SafeERC20.safeTransfer(transferToken, transferRecipient, transferAmount);\\n            }\\n        }\\n    }\\n\\n    function bridgeOut(address token, uint256 normalizedAmount) internal {\\n        uint256 outstanding = outstandingBridged(token);\\n        require(\\n            outstanding + normalizedAmount <= type(uint64).max,\\n            \\\"transfer exceeds max outstanding bridged token amount\\\"\\n        );\\n        setOutstandingBridged(token, outstanding + normalizedAmount);\\n    }\\n\\n    function bridgedIn(address token, uint256 normalizedAmount) internal {\\n        setOutstandingBridged(token, outstandingBridged(token) - normalizedAmount);\\n    }\\n\\n    function verifyBridgeVM(IWormhole.VM memory vm) internal view returns (bool) {\\n        if (bridgeContracts(vm.emitterChainId) == vm.emitterAddress) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function encodeAssetMeta(BridgeStructs.AssetMeta memory meta) public pure returns (bytes memory encoded) {\\n        encoded = abi.encodePacked(\\n            meta.payloadID,\\n            meta.tokenAddress,\\n            meta.tokenChain,\\n            meta.decimals,\\n            meta.symbol,\\n            meta.name\\n        );\\n    }\\n\\n    function encodeTransfer(BridgeStructs.Transfer memory transfer) public pure returns (bytes memory encoded) {\\n        encoded = abi.encodePacked(\\n            transfer.payloadID,\\n            transfer.amount,\\n            transfer.tokenAddress,\\n            transfer.tokenChain,\\n            transfer.to,\\n            transfer.toChain,\\n            transfer.fee\\n        );\\n    }\\n\\n    function parseAssetMeta(bytes memory encoded) public pure returns (BridgeStructs.AssetMeta memory meta) {\\n        uint256 index = 0;\\n\\n        meta.payloadID = encoded.toUint8(index);\\n        index += 1;\\n\\n        require(meta.payloadID == 2, \\\"invalid AssetMeta\\\");\\n\\n        meta.tokenAddress = encoded.toBytes32(index);\\n        index += 32;\\n\\n        meta.tokenChain = encoded.toUint16(index);\\n        index += 2;\\n\\n        meta.decimals = encoded.toUint8(index);\\n        index += 1;\\n\\n        meta.symbol = encoded.toBytes32(index);\\n        index += 32;\\n\\n        meta.name = encoded.toBytes32(index);\\n        index += 32;\\n\\n        require(encoded.length == index, \\\"invalid AssetMeta\\\");\\n    }\\n\\n    function parseTransfer(bytes memory encoded) public pure returns (BridgeStructs.Transfer memory transfer) {\\n        uint256 index = 0;\\n\\n        transfer.payloadID = encoded.toUint8(index);\\n        index += 1;\\n\\n        require(transfer.payloadID == 1, \\\"invalid Transfer\\\");\\n\\n        transfer.amount = encoded.toUint256(index);\\n        index += 32;\\n\\n        transfer.tokenAddress = encoded.toBytes32(index);\\n        index += 32;\\n\\n        transfer.tokenChain = encoded.toUint16(index);\\n        index += 2;\\n\\n        transfer.to = encoded.toBytes32(index);\\n        index += 32;\\n\\n        transfer.toChain = encoded.toUint16(index);\\n        index += 2;\\n\\n        transfer.fee = encoded.toUint256(index);\\n        index += 32;\\n\\n        require(encoded.length == index, \\\"invalid Transfer\\\");\\n    }\\n\\n    function bytes32ToString(bytes32 input) internal pure returns (string memory) {\\n        uint256 i;\\n        while (i < 32 && input[i] != 0) {\\n            i++;\\n        }\\n        bytes memory array = new bytes(i);\\n        for (uint256 c = 0; c < i; c++) {\\n            array[c] = input[c];\\n        }\\n        return string(array);\\n    }\\n\\n    // we need to accept ETH sends to unwrap WETH\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"src/Test/USDT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// for testing only not for production\\n// solhint-disable\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract USDT is ERC20 {\\n    constructor(\\n        address receiver,\\n        string memory name,\\n        string memory symbol\\n    ) ERC20(name, symbol) {\\n        // Mint 100 tokens to msg.sender\\n        // Similar to how\\n        // 1 dollar = 100 cents\\n        // 1 token = 1 * (10 ** decimals)\\n        _mint(receiver, 10000 * 10**uint256(6));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Facets/HopFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ILiFi } from \\\"../Interfaces/ILiFi.sol\\\";\\nimport { IHopBridge } from \\\"../Interfaces/IHopBridge.sol\\\";\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { LibSwap } from \\\"../Libraries/LibSwap.sol\\\";\\nimport { LibDiamond } from \\\"../Libraries/LibDiamond.sol\\\";\\n\\ncontract HopFacet is ILiFi {\\n    /* ========== Storage ========== */\\n\\n    bytes32 internal constant NAMESPACE = keccak256(\\\"com.lifi.facets.hop\\\");\\n    struct Storage {\\n        mapping(string => IHopBridge.BridgeConfig) hopBridges;\\n        uint256 hopChainId;\\n    }\\n\\n    /* ========== Types ========== */\\n\\n    struct HopData {\\n        string asset;\\n        address recipient;\\n        uint256 chainId;\\n        uint256 amount;\\n        uint256 bonderFee;\\n        uint256 amountOutMin;\\n        uint256 deadline;\\n        uint256 destinationAmountOutMin;\\n        uint256 destinationDeadline;\\n    }\\n\\n    /* ========== Init ========== */\\n\\n    function initHop(\\n        string[] memory _tokens,\\n        IHopBridge.BridgeConfig[] memory _bridgeConfigs,\\n        uint256 _chainId\\n    ) external {\\n        Storage storage s = getStorage();\\n        LibDiamond.enforceIsContractOwner();\\n\\n        for (uint8 i; i < _tokens.length; i++) {\\n            s.hopBridges[_tokens[i]] = _bridgeConfigs[i];\\n        }\\n        s.hopChainId = _chainId;\\n    }\\n\\n    /* ========== Public Bridge Functions ========== */\\n\\n    /**\\n     * @notice Bridges tokens via Hop Protocol\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _hopData data specific to Hop Protocol\\n     */\\n    function startBridgeTokensViaHop(LiFiData memory _lifiData, HopData calldata _hopData) public payable {\\n        address sendingAssetId = _bridge(_hopData.asset).token;\\n\\n        if (sendingAssetId == address(0)) require(msg.value == _hopData.amount, \\\"ERR_INVALID_AMOUNT\\\");\\n        else {\\n            uint256 _sendingAssetIdBalance = LibAsset.getOwnBalance(sendingAssetId);\\n            LibAsset.transferFromERC20(sendingAssetId, msg.sender, address(this), _hopData.amount);\\n            require(\\n                LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance == _hopData.amount,\\n                \\\"ERR_INVALID_AMOUNT\\\"\\n            );\\n        }\\n\\n        _startBridge(_hopData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Performs a swap before bridging via Hop Protocol\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _swapData an array of swap related data for performing swaps before bridging\\n     * @param _hopData data specific to Hop Protocol\\n     */\\n    function swapAndStartBridgeTokensViaHop(\\n        LiFiData memory _lifiData,\\n        LibSwap.SwapData[] calldata _swapData,\\n        HopData memory _hopData\\n    ) public payable {\\n        address sendingAssetId = _bridge(_hopData.asset).token;\\n\\n        uint256 _sendingAssetIdBalance = LibAsset.getOwnBalance(sendingAssetId);\\n\\n        // Swap\\n        for (uint8 i; i < _swapData.length; i++) {\\n            LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n        }\\n\\n        uint256 _postSwapBalance = LibAsset.getOwnBalance(sendingAssetId) - _sendingAssetIdBalance;\\n\\n        require(_postSwapBalance > 0, \\\"ERR_INVALID_AMOUNT\\\");\\n\\n        _hopData.amount = _postSwapBalance;\\n\\n        _startBridge(_hopData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /* ========== Internal Functions ========== */\\n\\n    /**\\n     * @dev Conatains the business logic for the bridge via Hop Protocol\\n     * @param _hopData data specific to Hop Protocol\\n     */\\n    function _startBridge(HopData memory _hopData) internal {\\n        Storage storage s = getStorage();\\n        address sendingAssetId = _bridge(_hopData.asset).token;\\n\\n        address bridge;\\n        if (s.hopChainId == 1) {\\n            bridge = _bridge(_hopData.asset).bridge;\\n        } else {\\n            bridge = _bridge(_hopData.asset).ammWrapper;\\n        }\\n\\n        // Do HOP stuff\\n        require(s.hopChainId != _hopData.chainId, \\\"Cannot bridge to the same network.\\\");\\n\\n        // Give Hop approval to bridge tokens\\n        LibAsset.approveERC20(IERC20(sendingAssetId), bridge, _hopData.amount);\\n\\n        uint256 value = LibAsset.isNativeAsset(address(sendingAssetId)) ? _hopData.amount : 0;\\n\\n        if (s.hopChainId == 1) {\\n            // Ethereum L1\\n            IHopBridge(bridge).sendToL2{ value: value }(\\n                _hopData.chainId,\\n                _hopData.recipient,\\n                _hopData.amount,\\n                _hopData.destinationAmountOutMin,\\n                _hopData.destinationDeadline,\\n                address(0),\\n                0\\n            );\\n        } else {\\n            // L2\\n            // solhint-disable-next-line check-send-result\\n            IHopBridge(bridge).swapAndSend{ value: value }(\\n                _hopData.chainId,\\n                _hopData.recipient,\\n                _hopData.amount,\\n                _hopData.bonderFee,\\n                _hopData.amountOutMin,\\n                _hopData.deadline,\\n                _hopData.destinationAmountOutMin,\\n                _hopData.destinationDeadline\\n            );\\n        }\\n    }\\n\\n    function _bridge(string memory _asset) internal view returns (IHopBridge.BridgeConfig memory) {\\n        Storage storage s = getStorage();\\n        return s.hopBridges[_asset];\\n    }\\n\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 namespace = NAMESPACE;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            s.slot := namespace\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IHopBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IHopBridge {\\n    struct BridgeConfig {\\n        address token;\\n        address bridge;\\n        address ammWrapper;\\n    }\\n\\n    function sendToL2(\\n        uint256 chainId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        address relayer,\\n        uint256 relayerFee\\n    ) external payable;\\n\\n    function swapAndSend(\\n        uint256 chainId,\\n        address recipient,\\n        uint256 amount,\\n        uint256 bonderFee,\\n        uint256 amountOutMin,\\n        uint256 deadline,\\n        uint256 destinationAmountOutMin,\\n        uint256 destinationDeadline\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/Facets/GenericBridgeFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ILiFi } from \\\"../Interfaces/ILiFi.sol\\\";\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { LibSwap } from \\\"../Libraries/LibSwap.sol\\\";\\nimport { LibUtil } from \\\"../Libraries/LibUtil.sol\\\";\\n\\ncontract GenericBridgeFacet is ILiFi {\\n    /* ========== Types ========== */\\n\\n    struct BridgeData {\\n        uint256 amount;\\n        address assetId;\\n        address callTo;\\n        bytes callData;\\n    }\\n\\n    /* ========== Public Bridge Functions ========== */\\n\\n    /**\\n     * @notice Bridges tokens via Generic Bridge\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _bridgeData data used for bridging via various contracts\\n     */\\n    function startBridgeTokensGeneric(LiFiData memory _lifiData, BridgeData memory _bridgeData) public payable {\\n        LibAsset.transferFromERC20(_bridgeData.assetId, msg.sender, address(this), _bridgeData.amount);\\n\\n        _startBridge(_bridgeData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Performs a swap before bridging via Hop Protocol\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _swapData an array of swap related data for performing swaps before bridging\\n     * @param _bridgeData data used for bridging via various contracts\\n     */\\n    function swapAndStartBridgeTokensGeneric(\\n        LiFiData memory _lifiData,\\n        LibSwap.SwapData[] calldata _swapData,\\n        BridgeData memory _bridgeData\\n    ) public payable {\\n        uint256 _fromTokenBalance = LibAsset.getOwnBalance(_bridgeData.assetId);\\n\\n        // Swap\\n        for (uint8 i; i < _swapData.length; i++) {\\n            LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n        }\\n\\n        require(\\n            LibAsset.getOwnBalance(_bridgeData.assetId) - _fromTokenBalance >= _bridgeData.amount,\\n            \\\"ERR_INVALID_AMOUNT\\\"\\n        );\\n\\n        _startBridge(_bridgeData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /* ========== Internal Functions ========== */\\n\\n    /**\\n     * @dev Conatains the business logic for the bridge via Hop Protocol\\n     */\\n    function _startBridge(BridgeData memory _bridgeData) internal {\\n        LibAsset.approveERC20(IERC20(_bridgeData.assetId), _bridgeData.callTo, _bridgeData.amount);\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory res) = _bridgeData.callTo.call{ value: msg.value }(_bridgeData.callData);\\n        if (!success) {\\n            string memory reason = LibUtil.getRevertMsg(res);\\n            revert(reason);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Facets/OpticsRouterFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../Libraries/LibBytes.sol\\\";\\nimport \\\"../Libraries/LibUtil.sol\\\";\\nimport \\\"../Libraries/LibDiamond.sol\\\";\\n\\ninterface Home {\\n    function dispatch(\\n        uint32 _destinationDomain,\\n        bytes32 _recipientAddress,\\n        bytes memory _messageBody\\n    ) external;\\n}\\n\\n/// @notice Cross-chain messaging router implemented using Optics Protocol (https://docs.celo.org/celo-codebase/protocol/optics).\\n/// @author Li.Finance (https://li.finance)\\ncontract OpticsRouterFacet {\\n    using LibBytes for bytes;\\n\\n    /* ========== Storage ========== */\\n\\n    bytes32 internal constant NAMESPACE = keccak256(\\\"com.lifi.facets.optics.router\\\");\\n    struct Storage {\\n        /// @dev Routes mapped by domain\\n        mapping(uint32 => Home) routes;\\n        /// @dev Approved routers by domain\\n        mapping(uint32 => bytes32) routers;\\n    }\\n\\n    /* ========== Events ========== */\\n\\n    event RemoteCall(uint32 domain, address indexed callee, address sender);\\n    event LocalCall(uint32 origin, address indexed callee, address home);\\n\\n    /* ========== Errors ========== */\\n\\n    error Unauthorized();\\n    error NoRemoteRouter();\\n    error CallError(string reason);\\n\\n    /* ========== Public Router Functions ========== */\\n\\n    function remoteCall(\\n        uint32 domain,\\n        address callee,\\n        bytes calldata callData\\n    ) external {\\n        Storage storage s = getStorage();\\n        if (s.routers[domain] == bytes32(0)) revert NoRemoteRouter();\\n        s.routes[domain].dispatch(domain, s.routers[domain], abi.encodePacked(callee, callData));\\n\\n        emit RemoteCall(domain, callee, address(s.routes[domain]));\\n    }\\n\\n    function handle(\\n        uint32 origin,\\n        bytes32 sender,\\n        bytes memory message\\n    ) public {\\n        Storage storage s = getStorage();\\n        if (s.routers[origin] != sender) revert Unauthorized();\\n\\n        // The first 20 bytes of the message are the callee address\\n        address callee = message.toAddress(0);\\n        // The remaining bytes should be calldata\\n        bytes memory callData = message.slice(20, message.length - 20);\\n\\n        // Don't allow any funny business\\n        if (callee == address(this)) revert Unauthorized();\\n\\n        // solhint-disable avoid-low-level-calls\\n        (bool success, bytes memory res) = callee.call(callData);\\n        if (!success) {\\n            string memory reason = LibUtil.getRevertMsg(res);\\n            revert CallError(reason);\\n        }\\n        emit LocalCall(origin, callee, address(uint160(uint256(sender))));\\n    }\\n\\n    // Nomad Implementation Version\\n    function handle(\\n        uint32 origin,\\n        uint32, // nonce\\n        bytes32 sender,\\n        bytes memory message\\n    ) external {\\n        handle(origin, sender, message);\\n    }\\n\\n    /// @notice Register the address of a Router contract on a remote chain\\n    /// @param domain The domain of the remote xApp Router\\n    /// @param router The address of the remote xApp Router\\n    function enrollRemoteRouter(uint32 domain, address router) external {\\n        LibDiamond.enforceIsContractOwner();\\n        Storage storage s = getStorage();\\n        s.routers[domain] = bytes32(uint256(uint160(router)));\\n    }\\n\\n    /// @notice Batch registers the addresses of Router contracts on a remote chain\\n    /// @param domains The domain of the remote xApp Router\\n    /// @param routers The address of the remote xApp Router\\n    function batchEnrollRemoteRouters(uint32[] calldata domains, address[] calldata routers) external {\\n        LibDiamond.enforceIsContractOwner();\\n        Storage storage s = getStorage();\\n        for (uint8 i = 0; i < domains.length; i++) {\\n            s.routers[domains[i]] = bytes32(uint256(uint160(routers[i])));\\n        }\\n    }\\n\\n    /// @notice Set a home address for a specific domain\\n    /// @param domain The domain of the remote xApp Router\\n    /// @param home The address of the remote xApp Router\\n    function setRoute(uint32 domain, Home home) external {\\n        LibDiamond.enforceIsContractOwner();\\n        Storage storage s = getStorage();\\n        s.routes[domain] = home;\\n    }\\n\\n    /// @notice Batch sets the home addresses of specific domains\\n    /// @param domains The domain of the remote xApp Router\\n    /// @param homes The address of the remote xApp Router\\n    function batchSetRoutes(uint32[] calldata domains, Home[] calldata homes) external {\\n        LibDiamond.enforceIsContractOwner();\\n        Storage storage s = getStorage();\\n        for (uint8 i = 0; i < domains.length; i++) {\\n            s.routes[domains[i]] = homes[i];\\n        }\\n    }\\n\\n    /* ========== Getters ========== */\\n\\n    function routeByDomain(uint32 domain) external view returns (address) {\\n        return address(getStorage().routes[domain]);\\n    }\\n\\n    function routerByDomain(uint32 domain) external view returns (address) {\\n        return address(uint160(uint256(getStorage().routers[domain])));\\n    }\\n\\n    /* ========== Internal Functions ========== */\\n\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 namespace = NAMESPACE;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            s.slot := namespace\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Facets/CBridgeFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { ILiFi } from \\\"../Interfaces/ILiFi.sol\\\";\\nimport { LibSwap } from \\\"../Libraries/LibSwap.sol\\\";\\nimport { ICBridge } from \\\"../Interfaces/ICBridge.sol\\\";\\nimport { LibDiamond } from \\\"../Libraries/LibDiamond.sol\\\";\\n\\ncontract CBridgeFacet is ILiFi {\\n    /* ========== Storage ========== */\\n\\n    bytes32 internal constant NAMESPACE = keccak256(\\\"com.lifi.facets.cbridge2\\\");\\n    struct Storage {\\n        address cBridge;\\n        uint64 cBridgeChainId;\\n    }\\n\\n    /* ========== Types ========== */\\n\\n    struct CBridgeData {\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 dstChainId;\\n        uint64 nonce;\\n        uint32 maxSlippage;\\n    }\\n\\n    /* ========== Init ========== */\\n\\n    function initCbridge(address _cBridge, uint64 _chainId) external {\\n        Storage storage s = getStorage();\\n        LibDiamond.enforceIsContractOwner();\\n        s.cBridge = _cBridge;\\n        s.cBridgeChainId = _chainId;\\n        emit Inited(s.cBridge, s.cBridgeChainId);\\n    }\\n\\n    /* ========== Public Bridge Functions ========== */\\n\\n    function startBridgeTokensViaCBridge(LiFiData memory _lifiData, CBridgeData calldata _cBridgeData) public payable {\\n        if (_cBridgeData.token != address(0)) {\\n            uint256 _fromTokenBalance = LibAsset.getOwnBalance(_cBridgeData.token);\\n\\n            LibAsset.transferFromERC20(_cBridgeData.token, msg.sender, address(this), _cBridgeData.amount);\\n\\n            require(\\n                LibAsset.getOwnBalance(_cBridgeData.token) - _fromTokenBalance == _cBridgeData.amount,\\n                \\\"ERR_INVALID_AMOUNT\\\"\\n            );\\n        } else {\\n            require(msg.value >= _cBridgeData.amount, \\\"ERR_INVALID_AMOUNT\\\");\\n        }\\n\\n        _startBridge(_cBridgeData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapAndStartBridgeTokensViaCBridge(\\n        LiFiData memory _lifiData,\\n        LibSwap.SwapData[] calldata _swapData,\\n        CBridgeData memory _cBridgeData\\n    ) public payable {\\n        if (_cBridgeData.token != address(0)) {\\n            uint256 _fromTokenBalance = LibAsset.getOwnBalance(_cBridgeData.token);\\n\\n            // Swap\\n            for (uint8 i; i < _swapData.length; i++) {\\n                LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n            }\\n\\n            uint256 _postSwapBalance = LibAsset.getOwnBalance(_cBridgeData.token) - _fromTokenBalance;\\n\\n            require(_postSwapBalance > 0, \\\"ERR_INVALID_AMOUNT\\\");\\n\\n            _cBridgeData.amount = _postSwapBalance;\\n        } else {\\n            uint256 _fromBalance = address(this).balance;\\n\\n            // Swap\\n            for (uint8 i; i < _swapData.length; i++) {\\n                LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n            }\\n\\n            uint256 _postSwapBalance = address(this).balance - _fromBalance;\\n\\n            require(_postSwapBalance > 0, \\\"ERR_INVALID_AMOUNT\\\");\\n\\n            _cBridgeData.amount = _postSwapBalance;\\n        }\\n\\n        _startBridge(_cBridgeData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /* ========== Internal Functions ========== */\\n\\n    /*\\n     * @dev Conatains the business logic for the bridge via CBridge\\n     * @param _cBridgeData data specific to CBridge\\n     */\\n    function _startBridge(CBridgeData memory _cBridgeData) internal {\\n        Storage storage s = getStorage();\\n        address bridge = _bridge();\\n\\n        // Do CBridge stuff\\n        require(s.cBridgeChainId != _cBridgeData.dstChainId, \\\"Cannot bridge to the same network.\\\");\\n\\n        if (LibAsset.isNativeAsset(_cBridgeData.token)) {\\n            ICBridge(bridge).sendNative(\\n                _cBridgeData.receiver,\\n                _cBridgeData.amount,\\n                _cBridgeData.dstChainId,\\n                _cBridgeData.nonce,\\n                _cBridgeData.maxSlippage\\n            );\\n        } else {\\n            // Give CBridge approval to bridge tokens\\n            LibAsset.approveERC20(IERC20(_cBridgeData.token), bridge, _cBridgeData.amount);\\n            // solhint-disable check-send-result\\n            ICBridge(bridge).send(\\n                _cBridgeData.receiver,\\n                _cBridgeData.token,\\n                _cBridgeData.amount,\\n                _cBridgeData.dstChainId,\\n                _cBridgeData.nonce,\\n                _cBridgeData.maxSlippage\\n            );\\n        }\\n    }\\n\\n    function _bridge() internal view returns (address) {\\n        Storage storage s = getStorage();\\n        return s.cBridge;\\n    }\\n\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 namespace = NAMESPACE;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            s.slot := namespace\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/ICBridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ICBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChinId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function sendNative(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _dstChinId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/Facets/BiconomyFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ILiFi } from \\\"../Interfaces/ILiFi.sol\\\";\\nimport { IBiconomyRouter } from \\\"../Interfaces/IBiconomyRouter.sol\\\";\\nimport { LibDiamond } from \\\"../Libraries/LibDiamond.sol\\\";\\nimport { LibAsset } from \\\"../Libraries/LibAsset.sol\\\";\\nimport { LibSwap } from \\\"../Libraries/LibSwap.sol\\\";\\n\\ncontract BiconomyFacet is ILiFi {\\n    /* ========== Storage ========== */\\n\\n    bytes32 internal constant NAMESPACE = keccak256(\\\"com.lifi.facets.biconomy\\\");\\n    struct Storage {\\n        address biconomyRouter;\\n    }\\n\\n    /* ========== Types ========== */\\n\\n    struct BiconomyData {\\n        address token;\\n        uint256 amount;\\n        address recipient;\\n        uint256 toChainId;\\n    }\\n\\n    /* ========== Init ========== */\\n\\n    function initBiconomy(address _biconomyRouter) external {\\n        Storage storage s = getStorage();\\n        LibDiamond.enforceIsContractOwner();\\n        s.biconomyRouter = _biconomyRouter;\\n    }\\n\\n    /* ========== Public Bridge Functions ========== */\\n\\n    /**\\n     * @notice Bridges tokens via Biconomy\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _biconomyData data specific to Biconomy\\n     */\\n    function startBridgeTokensViaBiconomy(LiFiData memory _lifiData, BiconomyData calldata _biconomyData)\\n        public\\n        payable\\n    {\\n        if (_biconomyData.token != address(0)) {\\n            uint256 _fromTokenBalance = LibAsset.getOwnBalance(_biconomyData.token);\\n\\n            LibAsset.transferFromERC20(_biconomyData.token, msg.sender, address(this), _biconomyData.amount);\\n\\n            require(\\n                LibAsset.getOwnBalance(_biconomyData.token) - _fromTokenBalance == _biconomyData.amount,\\n                \\\"ERR_INVALID_AMOUNT\\\"\\n            );\\n        } else {\\n            require(msg.value == _biconomyData.amount, \\\"ERR_INVALID_AMOUNT\\\");\\n        }\\n\\n        _startBridge(_biconomyData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Performs a swap before bridging via Biconomy\\n     * @param _lifiData data used purely for tracking and analytics\\n     * @param _swapData an array of swap related data for performing swaps before bridging\\n     * @param _biconomyData data specific to Biconomy\\n     */\\n    function swapAndStartBridgeTokensViaBiconomy(\\n        LiFiData memory _lifiData,\\n        LibSwap.SwapData[] calldata _swapData,\\n        BiconomyData memory _biconomyData\\n    ) public payable {\\n        if (_biconomyData.token != address(0)) {\\n            uint256 _fromTokenBalance = LibAsset.getOwnBalance(_biconomyData.token);\\n\\n            // Swap\\n            for (uint8 i; i < _swapData.length; i++) {\\n                LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n            }\\n\\n            uint256 _postSwapBalance = LibAsset.getOwnBalance(_biconomyData.token) - _fromTokenBalance;\\n\\n            require(_postSwapBalance > 0, \\\"ERR_INVALID_AMOUNT\\\");\\n\\n            _biconomyData.amount = _postSwapBalance;\\n        } else {\\n            uint256 _fromBalance = address(this).balance;\\n\\n            // Swap\\n            for (uint8 i; i < _swapData.length; i++) {\\n                LibSwap.swap(_lifiData.transactionId, _swapData[i]);\\n            }\\n\\n            uint256 _postSwapBalance = address(this).balance - _fromBalance;\\n\\n            require(_postSwapBalance > 0, \\\"ERR_INVALID_AMOUNT\\\");\\n\\n            _biconomyData.amount = _postSwapBalance;\\n        }\\n        _startBridge(_biconomyData);\\n\\n        emit LiFiTransferStarted(\\n            _lifiData.transactionId,\\n            _lifiData.integrator,\\n            _lifiData.referrer,\\n            _lifiData.sendingAssetId,\\n            _lifiData.receivingAssetId,\\n            _lifiData.receiver,\\n            _lifiData.amount,\\n            _lifiData.destinationChainId,\\n            block.timestamp\\n        );\\n    }\\n\\n    /* ========== External Config Functions ========== */\\n\\n    /**\\n     * @dev Changes address of Biconomy router\\n     * @param _newRouter address of the new router\\n     */\\n    function changeBiconomyRouter(address _newRouter) external {\\n        Storage storage s = getStorage();\\n        LibDiamond.enforceIsContractOwner();\\n        s.biconomyRouter = _newRouter;\\n    }\\n\\n    /* ========== Internal Functions ========== */\\n\\n    /**\\n     * @dev Conatains the business logic for the bridge via Biconomy\\n     * @param _biconomyData data specific to Biconomy\\n     */\\n    function _startBridge(BiconomyData memory _biconomyData) internal {\\n        Storage storage s = getStorage();\\n\\n        // Check chain id\\n        require(block.chainid != _biconomyData.toChainId, \\\"Cannot bridge to the same network.\\\");\\n\\n        if (_biconomyData.token != address(0)) {\\n            // Give Anyswap approval to bridge tokens\\n            LibAsset.approveERC20(IERC20(_biconomyData.token), s.biconomyRouter, _biconomyData.amount);\\n\\n            IBiconomyRouter(s.biconomyRouter).depositErc20(\\n                _biconomyData.token,\\n                _biconomyData.recipient,\\n                _biconomyData.amount,\\n                _biconomyData.toChainId\\n            );\\n        } else {\\n            IBiconomyRouter(s.biconomyRouter).depositNative{ value: _biconomyData.amount }(\\n                _biconomyData.recipient,\\n                _biconomyData.toChainId\\n            );\\n        }\\n    }\\n\\n    function getStorage() internal pure returns (Storage storage s) {\\n        bytes32 namespace = NAMESPACE;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            s.slot := namespace\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IBiconomyRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IBiconomyRouter {\\n    function depositErc20(\\n        address tokenAddress,\\n        address receiver,\\n        uint256 amount,\\n        uint256 toChainId\\n    ) external;\\n\\n    function depositNative(address receiver, uint256 toChainId) external payable;\\n}\\n\"\r\n    },\r\n    \"src/Facets/OwnershipFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { LibDiamond } from \\\"../Libraries/LibDiamond.sol\\\";\\nimport { IERC173 } from \\\"../Interfaces/IERC173.sol\\\";\\n\\ncontract OwnershipFacet is IERC173 {\\n    function transferOwnership(address _newOwner) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.setContractOwner(_newOwner);\\n    }\\n\\n    function owner() external view override returns (address owner_) {\\n        owner_ = LibDiamond.contractOwner();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IERC173.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\"\r\n    },\r\n    \"src/Facets/DiamondLoupeFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { LibDiamond } from \\\"../Libraries/LibDiamond.sol\\\";\\nimport { IDiamondLoupe } from \\\"../Interfaces/IDiamondLoupe.sol\\\";\\nimport { IERC165 } from \\\"../Interfaces/IERC165.sol\\\";\\n\\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently by tools.\\n    //\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external view override returns (Facet[] memory facets_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 numFacets = ds.facetAddresses.length;\\n        facets_ = new Facet[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress_ = ds.facetAddresses[i];\\n            facets_[i].facetAddress = facetAddress_;\\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress_].functionSelectors;\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors provided by a facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        override\\n        returns (bytes4[] memory facetFunctionSelectors_)\\n    {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view override returns (address[] memory facetAddresses_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddresses_ = ds.facetAddresses;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view override returns (address facetAddress_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId) external view override returns (bool) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        return ds.supportedInterfaces[_interfaceId];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\r\n    },\r\n    \"src/Interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"Inited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiFiTransferCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiFiTransferConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiFiTransferRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LiFiTransferStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cBridge\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"}],\"name\":\"initCbridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiFi.LiFiData\",\"name\":\"_lifiData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"maxSlippage\",\"type\":\"uint32\"}],\"internalType\":\"struct CBridgeFacet.CBridgeData\",\"name\":\"_cBridgeData\",\"type\":\"tuple\"}],\"name\":\"startBridgeTokensViaCBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"integrator\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiFi.LiFiData\",\"name\":\"_lifiData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"callTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approveTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sendingAssetId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSwap.SwapData[]\",\"name\":\"_swapData\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"maxSlippage\",\"type\":\"uint32\"}],\"internalType\":\"struct CBridgeFacet.CBridgeData\",\"name\":\"_cBridgeData\",\"type\":\"tuple\"}],\"name\":\"swapAndStartBridgeTokensViaCBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "CBridgeFacet", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bf8e38c2092944492527df009e990c65af01627e2418e40e08895c7e27c4284c"}]}