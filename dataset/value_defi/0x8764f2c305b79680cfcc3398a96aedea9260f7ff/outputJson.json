{"status": "1", "message": "OK", "result": [{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IValueVaultMaster {\r\n    function bank(address) view external returns (address);\r\n    function isVault(address) view external returns (bool);\r\n    function isController(address) view external returns (bool);\r\n    function isStrategy(address) view external returns (bool);\r\n\r\n    function slippage(address) view external returns (uint);\r\n    function convertSlippage(address _input, address _output) view external returns (uint);\r\n\r\n    function valueToken() view external returns (address);\r\n    function govVault() view external returns (address);\r\n    function insuranceFund() view external returns (address);\r\n    function performanceReward() view external returns (address);\r\n\r\n    function govVaultProfitShareFee() view external returns (uint);\r\n    function gasFee() view external returns (uint);\r\n    function insuranceFee() view external returns (uint);\r\n    function withdrawalProtectionFee() view external returns (uint);\r\n}\r\n\r\ninterface IValueMultiVault {\r\n    function cap() external view returns (uint);\r\n    function getConverter(address _want) external view returns (address);\r\n    function getVaultMaster() external view returns (address);\r\n    function balance() external view returns (uint);\r\n    function token() external view returns (address);\r\n    function available(address _want) external view returns (uint);\r\n    function accept(address _input) external view returns (bool);\r\n\r\n    function claimInsurance() external;\r\n    function earn(address _want) external;\r\n    function harvest(address reserve, uint amount) external;\r\n\r\n    function withdraw_fee(uint _shares) external view returns (uint);\r\n    function calc_token_amount_deposit(uint[] calldata _amounts) external view returns (uint);\r\n    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint);\r\n    function convert_rate(address _input, uint _amount) external view returns (uint);\r\n    function getPricePerFullShare() external view returns (uint);\r\n    function get_virtual_price() external view returns (uint); // average dollar value of vault share token\r\n\r\n    function deposit(address _input, uint _amount, uint _min_mint_amount) external returns (uint _mint_amount);\r\n    function depositFor(address _account, address _to, address _input, uint _amount, uint _min_mint_amount) external returns (uint _mint_amount);\r\n    function depositAll(uint[] calldata _amounts, uint _min_mint_amount) external returns (uint _mint_amount);\r\n    function depositAllFor(address _account, address _to, uint[] calldata _amounts, uint _min_mint_amount) external returns (uint _mint_amount);\r\n    function withdraw(uint _shares, address _output, uint _min_output_amount) external returns (uint);\r\n    function withdrawFor(address _account, uint _shares, address _output, uint _min_output_amount) external returns (uint _output_amount);\r\n\r\n    function harvestStrategy(address _strategy) external;\r\n    function harvestWant(address _want) external;\r\n    function harvestAllStrategies() external;\r\n}\r\n\r\ninterface IMultiVaultConverter {\r\n    function token() external returns (address);\r\n    function get_virtual_price() external view returns (uint);\r\n\r\n    function convert_rate(address _input, address _output, uint _inputAmount) external view returns (uint _outputAmount);\r\n    function calc_token_amount_deposit(uint[] calldata _amounts) external view returns (uint _shareAmount);\r\n    function calc_token_amount_withdraw(uint _shares, address _output) external view returns (uint _outputAmount);\r\n\r\n    function convert(address _input, address _output, uint _inputAmount) external returns (uint _outputAmount);\r\n    function convertAll(uint[] calldata _amounts) external returns (uint _outputAmount);\r\n}\r\n\r\ninterface IFreeFromUpTo {\r\n    function freeFromUpTo(address from, uint value) external returns (uint freed);\r\n}\r\n\r\ncontract ValueMultiVaultBank {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\r\n\r\n    modifier discountCHI(uint8 _flag) {\r\n        if ((_flag & 0x1) == 0) {\r\n            _;\r\n        } else {\r\n            uint gasStart = gasleft();\r\n            _;\r\n            uint gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\r\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41130);\r\n        }\r\n    }\r\n\r\n    IERC20 public valueToken = IERC20(0x49E833337ECe7aFE375e44F4E3e8481029218E5c);\r\n\r\n    address public governance;\r\n    address public strategist; // who can call harvestXXX()\r\n\r\n    IValueVaultMaster public vaultMaster;\r\n    \r\n    struct UserInfo {\r\n        uint amount;\r\n        mapping(uint8 => uint) rewardDebt;\r\n        mapping(uint8 => uint) accumulatedEarned; // will accumulate every time user harvest\r\n    }\r\n\r\n    struct RewardPoolInfo {\r\n        IERC20 rewardToken;     // Address of rewardPool token contract.\r\n        uint lastRewardBlock;   // Last block number that rewardPool distribution occurs.\r\n        uint endRewardBlock;    // Block number which rewardPool distribution ends.\r\n        uint rewardPerBlock;    // Reward token amount to distribute per block.\r\n        uint accRewardPerShare; // Accumulated rewardPool per share, times 1e18.\r\n        uint totalPaidRewards;  // for stat only\r\n    }\r\n\r\n    mapping(address => RewardPoolInfo[]) public rewardPoolInfos; // vault address => pool info\r\n    mapping(address => mapping(address => UserInfo)) public userInfo; // vault address => account => userInfo\r\n\r\n    event Deposit(address indexed vault, address indexed user, uint amount);\r\n    event Withdraw(address indexed vault, address indexed user, uint amount);\r\n    event RewardPaid(address indexed vault, uint pid, address indexed user, uint reward);\r\n\r\n    constructor(IERC20 _valueToken, IValueVaultMaster _vaultMaster) public {\r\n        valueToken = _valueToken;\r\n        vaultMaster = _vaultMaster;\r\n        governance = msg.sender;\r\n        strategist = msg.sender;\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setVaultMaster(IValueVaultMaster _vaultMaster) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        vaultMaster = _vaultMaster;\r\n    }\r\n\r\n    function addVaultRewardPool(address _vault, IERC20 _rewardToken, uint _startBlock, uint _endRewardBlock, uint _rewardPerBlock) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        RewardPoolInfo[] storage rewardPools = rewardPoolInfos[_vault];\r\n        require(rewardPools.length < 8, \"exceed rwdPoolLim\");\r\n        _startBlock = (block.number > _startBlock) ? block.number : _startBlock;\r\n        require(_startBlock <= _endRewardBlock, \"sVB>eVB\");\r\n        updateReward(_vault);\r\n        rewardPools.push(RewardPoolInfo({\r\n            rewardToken : _rewardToken,\r\n            lastRewardBlock : _startBlock,\r\n            endRewardBlock : _endRewardBlock,\r\n            rewardPerBlock : _rewardPerBlock,\r\n            accRewardPerShare : 0,\r\n            totalPaidRewards : 0\r\n            }));\r\n    }\r\n\r\n    function updateRewardPool(address _vault, uint8 _pid, uint _endRewardBlock, uint _rewardPerBlock) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        updateRewardPool(_vault, _pid);\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfos[_vault][_pid];\r\n        require(block.number <= rewardPool.endRewardBlock, \"late\");\r\n        rewardPool.endRewardBlock = _endRewardBlock;\r\n        rewardPool.rewardPerBlock = _rewardPerBlock;\r\n    }\r\n\r\n    function updateReward(address _vault) public {\r\n        uint8 rewardPoolLength = uint8(rewardPoolInfos[_vault].length);\r\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\r\n            updateRewardPool(_vault, _pid);\r\n        }\r\n    }\r\n\r\n    function updateRewardPool(address _vault, uint8 _pid) public {\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfos[_vault][_pid];\r\n        uint _endRewardBlockApplicable = block.number > rewardPool.endRewardBlock ? rewardPool.endRewardBlock : block.number;\r\n        if (_endRewardBlockApplicable > rewardPool.lastRewardBlock) {\r\n            uint lpSupply = IERC20(address(_vault)).balanceOf(address(this));\r\n            if (lpSupply > 0) {\r\n                uint _numBlocks = _endRewardBlockApplicable.sub(rewardPool.lastRewardBlock);\r\n                uint _incRewardPerShare = _numBlocks.mul(rewardPool.rewardPerBlock).mul(1e18).div(lpSupply);\r\n                rewardPool.accRewardPerShare = rewardPool.accRewardPerShare.add(_incRewardPerShare);\r\n            }\r\n            rewardPool.lastRewardBlock = _endRewardBlockApplicable;\r\n        }\r\n    }\r\n\r\n    function cap(IValueMultiVault _vault) external view returns (uint) {\r\n        return _vault.cap();\r\n    }\r\n\r\n    function approveForSpender(IERC20 _token, address _spender, uint _amount) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(!vaultMaster.isVault(address(_token)), \"vaultToken\");\r\n        _token.safeApprove(_spender, _amount);\r\n    }\r\n\r\n    function deposit(IValueMultiVault _vault, address _input, uint _amount, uint _min_mint_amount, bool _isStake, uint8 _flag) public discountCHI(_flag) {\r\n        require(_vault.accept(_input), \"vault does not accept this asset\");\r\n        require(_amount > 0, \"!_amount\");\r\n\r\n        if (!_isStake) {\r\n            _vault.depositFor(msg.sender, msg.sender, _input, _amount, _min_mint_amount);\r\n        } else {\r\n            uint _mint_amount = _vault.depositFor(msg.sender, address(this), _input, _amount, _min_mint_amount);\r\n            _stakeVaultShares(address(_vault), _mint_amount);\r\n        }\r\n    }\r\n\r\n    function depositAll(IValueMultiVault _vault, uint[] calldata _amounts, uint _min_mint_amount, bool _isStake, uint8 _flag) public discountCHI(_flag) {\r\n        if (!_isStake) {\r\n            _vault.depositAllFor(msg.sender, msg.sender, _amounts, _min_mint_amount);\r\n        } else {\r\n            uint _mint_amount = _vault.depositAllFor(msg.sender, address(this), _amounts, _min_mint_amount);\r\n            _stakeVaultShares(address(_vault), _mint_amount);\r\n        }\r\n    }\r\n\r\n    function stakeVaultShares(address _vault, uint _shares) external {\r\n        uint _before = IERC20(address(_vault)).balanceOf(address(this));\r\n        IERC20(address(_vault)).safeTransferFrom(msg.sender, address(this), _shares);\r\n        uint _after = IERC20(address(_vault)).balanceOf(address(this));\r\n        _shares = _after.sub(_before); // Additional check for deflationary tokens\r\n        _stakeVaultShares(_vault, _shares);\r\n    }\r\n\r\n    function _stakeVaultShares(address _vault, uint _shares) internal {\r\n        UserInfo storage user = userInfo[_vault][msg.sender];\r\n        updateReward(_vault);\r\n        if (user.amount > 0) {\r\n            getAllRewards(_vault, msg.sender, uint8(0));\r\n        }\r\n        user.amount = user.amount.add(_shares);\r\n        RewardPoolInfo[] storage rewardPools = rewardPoolInfos[_vault];\r\n        uint8 rewardPoolLength = uint8(rewardPools.length);\r\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\r\n            user.rewardDebt[_pid] = user.amount.mul(rewardPools[_pid].accRewardPerShare).div(1e18);\r\n        }\r\n        emit Deposit(_vault, msg.sender, _shares);\r\n    }\r\n\r\n    // call unstake(_vault, 0) for getting reward\r\n    function unstake(address _vault, uint _amount, uint8 _flag) public discountCHI(_flag) {\r\n        UserInfo storage user = userInfo[_vault][msg.sender];\r\n        updateReward(_vault);\r\n        if (user.amount > 0) {\r\n            getAllRewards(_vault, msg.sender, uint8(0));\r\n        }\r\n        if (_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            IERC20(address(_vault)).safeTransfer(msg.sender, _amount);\r\n        }\r\n        RewardPoolInfo[] storage rewardPools = rewardPoolInfos[_vault];\r\n        uint8 rewardPoolLength = uint8(rewardPools.length);\r\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\r\n            user.rewardDebt[_pid] = user.amount.mul(rewardPools[_pid].accRewardPerShare).div(1e18);\r\n        }\r\n        emit Withdraw(_vault, msg.sender, _amount);\r\n    }\r\n\r\n    // using PUSH pattern\r\n    function getAllRewards(address _vault, address _account, uint8 _flag) public discountCHI(_flag) {\r\n        uint8 rewardPoolLength = uint8(rewardPoolInfos[_vault].length);\r\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\r\n            getReward(_vault, _pid, _account, uint8(0));\r\n        }\r\n    }\r\n\r\n    function getReward(address _vault, uint8 _pid, address _account, uint8 _flag) public discountCHI(_flag) {\r\n        updateRewardPool(_vault, _pid);\r\n        UserInfo storage user = userInfo[_vault][_account];\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfos[_vault][_pid];\r\n        uint _pendingReward = user.amount.mul(rewardPool.accRewardPerShare).div(1e18).sub(user.rewardDebt[_pid]);\r\n        if (_pendingReward > 0) {\r\n            user.accumulatedEarned[_pid] = user.accumulatedEarned[_pid].add(_pendingReward);\r\n            rewardPool.totalPaidRewards = rewardPool.totalPaidRewards.add(_pendingReward);\r\n            safeTokenTransfer(rewardPool.rewardToken, _account, _pendingReward);\r\n            emit RewardPaid(_vault, _pid, _account, _pendingReward);\r\n            user.rewardDebt[_pid] = user.amount.mul(rewardPool.accRewardPerShare).div(1e18);\r\n        }\r\n    }\r\n\r\n    function pendingReward(address _vault, uint8 _pid, address _account) public view returns (uint _pending) {\r\n        UserInfo storage user = userInfo[_vault][_account];\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfos[_vault][_pid];\r\n        uint _accRewardPerShare = rewardPool.accRewardPerShare;\r\n        uint lpSupply = IERC20(_vault).balanceOf(address(this));\r\n        uint _endRewardBlockApplicable = block.number > rewardPool.endRewardBlock ? rewardPool.endRewardBlock : block.number;\r\n        if (_endRewardBlockApplicable > rewardPool.lastRewardBlock && lpSupply != 0) {\r\n            uint _numBlocks = _endRewardBlockApplicable.sub(rewardPool.lastRewardBlock);\r\n            uint _incRewardPerShare = _numBlocks.mul(rewardPool.rewardPerBlock).mul(1e18).div(lpSupply);\r\n            _accRewardPerShare = _accRewardPerShare.add(_incRewardPerShare);\r\n        }\r\n        _pending = user.amount.mul(_accRewardPerShare).div(1e18).sub(user.rewardDebt[_pid]);\r\n    }\r\n\r\n    function shares_owner(address _vault, address _account) public view returns (uint) {\r\n        return IERC20(_vault).balanceOf(_account).add(userInfo[_vault][_account].amount);\r\n    }\r\n\r\n    // No rebalance implementation for lower fees and faster swaps\r\n    function withdraw(address _vault, uint _shares, address _output, uint _min_output_amount, uint8 _flag) public discountCHI(_flag) {\r\n        uint _userBal = IERC20(address(_vault)).balanceOf(msg.sender);\r\n        if (_shares > _userBal) {\r\n            uint _need = _shares.sub(_userBal);\r\n            require(_need <= userInfo[_vault][msg.sender].amount, \"_userBal+staked < _shares\");\r\n            unstake(_vault, _need, uint8(0));\r\n        }\r\n        IERC20(address(_vault)).safeTransferFrom(msg.sender, address(this), _shares);\r\n        IValueMultiVault(_vault).withdrawFor(msg.sender, _shares, _output, _min_output_amount);\r\n    }\r\n\r\n    function exit(address _vault, address _output, uint _min_output_amount, uint8 _flag) external discountCHI(_flag) {\r\n        unstake(_vault, userInfo[_vault][msg.sender].amount, uint8(0));\r\n        withdraw(_vault, IERC20(address(_vault)).balanceOf(msg.sender), _output, _min_output_amount, uint8(0));\r\n    }\r\n\r\n    function withdraw_fee(IValueMultiVault _vault, uint _shares) external view returns (uint) {\r\n        return _vault.withdraw_fee(_shares);\r\n    }\r\n\r\n    function calc_token_amount_deposit(IValueMultiVault _vault, uint[] calldata _amounts) external view returns (uint) {\r\n        return _vault.calc_token_amount_deposit(_amounts);\r\n    }\r\n\r\n    function calc_token_amount_withdraw(IValueMultiVault _vault, uint _shares, address _output) external view returns (uint) {\r\n        return _vault.calc_token_amount_withdraw(_shares, _output);\r\n    }\r\n\r\n    function convert_rate(IValueMultiVault _vault, address _input, uint _amount) external view returns (uint) {\r\n        return _vault.convert_rate(_input, _amount);\r\n    }\r\n\r\n    function harvestStrategy(IValueMultiVault _vault, address _strategy, uint8 _flag) external discountCHI(_flag) {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\r\n        _vault.harvestStrategy(_strategy);\r\n    }\r\n\r\n    function harvestWant(IValueMultiVault _vault, address _want, uint8 _flag) external discountCHI(_flag) {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\r\n        _vault.harvestWant(_want);\r\n    }\r\n\r\n    function harvestAllStrategies(IValueMultiVault _vault, uint8 _flag) external discountCHI(_flag) {\r\n        require(msg.sender == strategist || msg.sender == governance, \"!strategist\");\r\n        _vault.harvestAllStrategies();\r\n    }\r\n\r\n    // Safe token transfer function, just in case if rounding error causes vinfo to not have enough token.\r\n    function safeTokenTransfer(IERC20 _token, address _to, uint _amount) internal {\r\n        uint bal = _token.balanceOf(address(this));\r\n        if (_amount > bal) {\r\n            _token.safeTransfer(_to, bal);\r\n        } else {\r\n            _token.safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function allows governance to take unsupported tokens out of the contract. This is in an effort to make someone whole, should they seriously mess up.\r\n     * There is no guarantee governance will vote to return these. It also allows for removal of airdropped tokens.\r\n     */\r\n    function governanceRecoverUnsupported(IERC20 _token, uint amount, address to) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        require(!vaultMaster.isVault(address(_token)), \"vaultToken\");\r\n        _token.safeTransfer(to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_valueToken\",\"type\":\"address\"},{\"internalType\":\"contract IValueVaultMaster\",\"name\":\"_vaultMaster\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"addVaultRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveForSpender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueMultiVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"calc_token_amount_deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueMultiVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"}],\"name\":\"calc_token_amount_withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueMultiVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IFreeFromUpTo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueMultiVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convert_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueMultiVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStake\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueMultiVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStake\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min_output_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"getAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueMultiVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"harvestAllStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueMultiVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"harvestStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueMultiVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"harvestWant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPoolInfos\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaidRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueVaultMaster\",\"name\":\"_vaultMaster\",\"type\":\"address\"}],\"name\":\"setVaultMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"shares_owner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"stakeVaultShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"updateRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_endRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultMaster\",\"outputs\":[{\"internalType\":\"contract IValueVaultMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_output\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_min_output_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_flag\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IValueMultiVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ValueMultiVaultBank", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000049e833337ece7afe375e44f4e3e8481029218e5c000000000000000000000000ea48b3f50f3cf2216e34e2e868abc810b729f0e3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b3edf526a6139da816766cdf5223b2e0bdebd1cae768e38a40fadb929391c5ce"}]}