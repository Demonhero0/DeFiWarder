{"status": "1", "message": "OK", "result": [{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Revest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport '@openzeppelin/contracts/utils/introspection/ERC165Checker.sol';\\nimport \\\"./interfaces/IRevest.sol\\\";\\nimport \\\"./interfaces/IAddressRegistry.sol\\\";\\nimport \\\"./interfaces/ILockManager.sol\\\";\\nimport \\\"./interfaces/IInterestHandler.sol\\\";\\nimport \\\"./interfaces/ITokenVault.sol\\\";\\nimport \\\"./interfaces/IRewardsHandler.sol\\\";\\nimport \\\"./interfaces/IOracleDispatch.sol\\\";\\nimport \\\"./interfaces/IOutputReceiver.sol\\\";\\nimport \\\"./interfaces/IAddressLock.sol\\\";\\nimport \\\"./utils/RevestAccessControl.sol\\\";\\nimport \\\"./utils/RevestReentrancyGuard.sol\\\";\\nimport \\\"./lib/IUnicryptV2Locker.sol\\\";\\nimport \\\"./lib/IWETH.sol\\\";\\nimport \\\"./FNFTHandler.sol\\\";\\n\\n/**\\n * This is the entrypoint for the frontend, as well as third-party Revest integrations.\\n * Solidity style guide ordering: receive, fallback, external, public, internal, private - within a grouping, view and pure go last - https://docs.soliditylang.org/en/latest/style-guide.html\\n */\\ncontract Revest is IRevest, AccessControlEnumerable, RevestAccessControl, RevestReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using ERC165Checker for address;\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes4 public constant ADDRESS_LOCK_INTERFACE_ID = type(IAddressLock).interfaceId;\\n\\n    address immutable WETH;\\n\\n    uint public erc20Fee = 0; // out of 1000\\n    uint private constant erc20multiplierPrecision = 1000;\\n    uint public flatWeiFee = 0;\\n    uint private constant MAX_INT = 2**256 - 1;\\n    mapping(address => bool) private approved;\\n\\n    /**\\n     * @dev Primary constructor to create the Revest controller contract\\n     * Grants ADMIN and MINTER_ROLE to whoever creates the contract\\n     *\\n     */\\n    constructor(address provider, address weth) RevestAccessControl(provider) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n        WETH = weth;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /**\\n     * @dev creates a single time-locked NFT with <quantity> number of copies with <amount> of <asset> stored for each copy\\n     * asset - the address of the underlying ERC20 token for this bond\\n     * amount - the amount to store per NFT if multiple NFTs of this variety are being created\\n     * unlockTime - the timestamp at which this will unlock\\n     * quantity \u2013 the number of FNFTs to create with this operation     */\\n    function mintTimeLock(\\n        uint endTime,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable override returns (uint) {\\n        // Get the next id\\n        uint fnftId = getFNFTHandler().getNextId();\\n        // Get or create lock based on time, assign lock to ID\\n        {\\n            IRevest.LockParam memory timeLock;\\n            timeLock.lockType = IRevest.LockType.TimeLock;\\n            timeLock.timeLockExpiry = endTime;\\n            getLockManager().createLock(fnftId, timeLock);\\n        }\\n        doMint(recipients, quantities, fnftId, fnftConfig, msg.value);\\n\\n        emit FNFTTimeLockMinted(fnftConfig.asset, _msgSender(), fnftId, endTime, quantities, fnftConfig);\\n\\n        return fnftId;\\n    }\\n\\n    function mintValueLock(\\n        address primaryAsset,\\n        address compareTo,\\n        uint unlockValue,\\n        bool unlockRisingEdge,\\n        address oracleDispatch,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable override returns (uint) {\\n        // copy the fnftId\\n        uint fnftId = getFNFTHandler().getNextId();\\n        // Initialize the lock structure\\n        {\\n            IRevest.LockParam memory valueLock;\\n            valueLock.lockType = IRevest.LockType.ValueLock;\\n            valueLock.valueLock.unlockRisingEdge = unlockRisingEdge;\\n            valueLock.valueLock.unlockValue = unlockValue;\\n            valueLock.valueLock.asset = primaryAsset;\\n            valueLock.valueLock.compareTo = compareTo;\\n            valueLock.valueLock.oracle = oracleDispatch;\\n\\n            getLockManager().createLock(fnftId, valueLock);\\n        }\\n\\n        doMint(recipients, quantities, fnftId, fnftConfig, msg.value);\\n\\n        emit FNFTValueLockMinted(primaryAsset,  _msgSender(), fnftId, compareTo, oracleDispatch, quantities, fnftConfig);\\n\\n        return fnftId;\\n    }\\n\\n    function mintAddressLock(\\n        address trigger,\\n        bytes memory arguments,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable override returns (uint) {\\n        uint fnftId = getFNFTHandler().getNextId();\\n\\n        {\\n            IRevest.LockParam memory addressLock;\\n            addressLock.addressLock = trigger;\\n            addressLock.lockType = IRevest.LockType.AddressLock;\\n            // Get or create lock based on address which can trigger unlock, assign lock to ID\\n            uint lockId = getLockManager().createLock(fnftId, addressLock);\\n\\n            if(trigger.supportsInterface(ADDRESS_LOCK_INTERFACE_ID)) {\\n                IAddressLock(trigger).createLock(fnftId, lockId, arguments);\\n            }\\n        }\\n        // This is a public call to a third-party contract. Must be done after everything else.\\n        // Safe for reentry\\n        doMint(recipients, quantities, fnftId, fnftConfig, msg.value);\\n\\n        emit FNFTAddressLockMinted(fnftConfig.asset, _msgSender(), fnftId, trigger, quantities, fnftConfig);\\n\\n        return fnftId;\\n    }\\n\\n    function withdrawFNFT(uint fnftId, uint quantity) external override revestNonReentrant(fnftId) {\\n        address fnftHandler = addressesProvider.getRevestFNFT();\\n        // Check if this many FNFTs exist in the first place for the given ID\\n        require(quantity <= IFNFTHandler(fnftHandler).getSupply(fnftId), \\\"E022\\\");\\n        // Check if the user making this call has this many FNFTs to cash in\\n        require(quantity <= IFNFTHandler(fnftHandler).getBalance(_msgSender(), fnftId), \\\"E006\\\");\\n        // Check if the user making this call has any FNFT's\\n        require(IFNFTHandler(fnftHandler).getBalance(_msgSender(), fnftId) > 0, \\\"E032\\\");\\n\\n        IRevest.LockType lockType = getLockManager().lockTypes(fnftId);\\n        require(lockType != IRevest.LockType.DoesNotExist, \\\"E007\\\");\\n        require(getLockManager().unlockFNFT(fnftId, _msgSender()),\\n            lockType == IRevest.LockType.TimeLock ? \\\"E010\\\" :\\n            lockType == IRevest.LockType.ValueLock ? \\\"E018\\\" : \\\"E019\\\");\\n        // Burn the FNFTs being exchanged\\n        burn(_msgSender(), fnftId, quantity);\\n        getTokenVault().withdrawToken(fnftId, quantity, _msgSender());\\n\\n        emit FNFTWithdrawn(_msgSender(), fnftId, quantity);\\n    }\\n\\n    function unlockFNFT(uint fnftId) external override {\\n        // Works for value locks or time locks\\n        IRevest.LockType lock = getLockManager().lockTypes(fnftId);\\n        require(lock == IRevest.LockType.AddressLock || lock == IRevest.LockType.ValueLock, \\\"E008\\\");\\n        require(getLockManager().unlockFNFT(fnftId, _msgSender()), \\\"E056\\\");\\n\\n        emit FNFTUnlocked(_msgSender(), fnftId);\\n    }\\n\\n    function splitFNFT(\\n        uint fnftId,\\n        uint[] memory proportions,\\n        uint quantity\\n    ) external override returns (uint[] memory) {\\n        // Check if the user making this call has ANY FNFT's\\n        require(getFNFTHandler().getBalance(_msgSender(), fnftId) > 0, \\\"E032\\\");\\n        // Checking if the FNFT is allowing splitting\\n        require(getTokenVault().getSplitsRemaining(fnftId) > 0, \\\"E023\\\");\\n        uint[] memory newFNFTIds = new uint[](proportions.length);\\n        uint start = getFNFTHandler().getNextId();\\n        uint lockId = getLockManager().fnftIdToLockId(fnftId);\\n        getFNFTHandler().burn(_msgSender(), fnftId, quantity);\\n        for(uint i = 0; i < proportions.length; i++) {\\n            newFNFTIds[i] = start + i;\\n            getFNFTHandler().mint(_msgSender(), newFNFTIds[i], quantity, \\\"\\\");\\n            getLockManager().pointFNFTToLock(newFNFTIds[i], lockId);\\n        }\\n        getTokenVault().splitFNFT(fnftId, newFNFTIds, proportions, quantity);\\n\\n        emit FNFTSplit(_msgSender(), newFNFTIds, proportions, quantity);\\n\\n        return newFNFTIds;\\n    }\\n\\n    /// @return the new (or reused) ID\\n    function extendFNFTMaturity(\\n        uint fnftId,\\n        uint endTime\\n    ) external returns (uint) {\\n        uint supply = getFNFTHandler().getSupply(fnftId);\\n        uint balance = getFNFTHandler().getBalance(_msgSender(), fnftId);\\n\\n        require(fnftId < getFNFTHandler().getNextId(), \\\"E007\\\");\\n        require(balance == supply, \\\"E022\\\");\\n        // If it can't have its maturity extended, revert\\n        // Will also return false on non-time lock locks\\n        require(getTokenVault().getFNFT(fnftId).maturityExtension &&\\n            getLockManager().lockTypes(fnftId) == IRevest.LockType.TimeLock, \\\"E029\\\");\\n        // If desired maturity is below existing date, reject operation\\n        require(getLockManager().fnftIdToLock(fnftId).timeLockExpiry < endTime, \\\"E030\\\");\\n\\n        // Update the lock\\n        IRevest.LockParam memory lock;\\n        lock.lockType = IRevest.LockType.TimeLock;\\n        lock.timeLockExpiry = endTime;\\n\\n        getLockManager().createLock(fnftId, lock);\\n\\n        emit FNFTMaturityExtended(_msgSender(), fnftId, endTime);\\n\\n        // Need to handle fracture into multiple FNFTs with same value as original but different locks\\n        return fnftId;\\n    }\\n\\n    /**\\n     * Amount will be per FNFT. So total ERC20s needed is amount * quantity.\\n     * We don't charge an ETH fee on depositAdditional, but do take the erc20 percentage.\\n     * Users can deposit additional into their own\\n     * Otherwise, if not an owner, they must distribute to all FNFTs equally\\n     */\\n    function depositAdditionalToFNFT(\\n        uint fnftId,\\n        uint amount,\\n        uint quantity\\n    ) external override returns (uint) {\\n        IRevest.FNFTConfig memory fnft = getTokenVault().getFNFT(fnftId);\\n        require(fnftId < getFNFTHandler().getNextId(), \\\"E007\\\");\\n        require(fnft.isMulti, \\\"E034\\\");\\n        require(fnft.depositStopTime < block.timestamp || fnft.depositStopTime == 0, \\\"E035\\\");\\n        require(quantity > 0, \\\"E070\\\");\\n\\n        address vault = addressesProvider.getTokenVault();\\n        address handler = addressesProvider.getRevestFNFT();\\n        address lockHandler = addressesProvider.getLockManager();\\n\\n        bool createNewSeries = false;\\n        {\\n            uint supply = IFNFTHandler(handler).getSupply(fnftId);\\n\\n            uint balance = IFNFTHandler(handler).getBalance(_msgSender(), fnftId);\\n\\n            if (quantity > balance) {\\n                require(quantity == supply, \\\"E069\\\");\\n            }\\n            else if (quantity < balance || balance < supply) {\\n                createNewSeries = true;\\n            }\\n        }\\n\\n        // Transfer the ERC20 fee to the admin address, leave it at that\\n        uint totalERC20Fee = erc20Fee * quantity * amount / erc20multiplierPrecision;\\n        if(totalERC20Fee > 0) {\\n            IERC20(fnft.asset).safeTransferFrom(_msgSender(), addressesProvider.getAdmin(), totalERC20Fee);\\n        }\\n\\n        uint lockId = ILockManager(lockHandler).fnftIdToLockId(fnftId);\\n\\n        // Whether to split the new deposits into their own series, or to simply add to an existing series\\n        uint newFNFTId;\\n        if(createNewSeries) {\\n            // Split into a new series\\n            newFNFTId = IFNFTHandler(handler).getNextId();\\n            ILockManager(lockHandler).pointFNFTToLock(newFNFTId, lockId);\\n            burn(_msgSender(), fnftId, quantity);\\n            IFNFTHandler(handler).mint(_msgSender(), newFNFTId, quantity, \\\"\\\");\\n        } else {\\n            // Stay the same\\n            newFNFTId = 0; // Signals to handleMultipleDeposits()\\n        }\\n\\n        // Will call updateBalance\\n        ITokenVault(vault).depositToken(fnftId, amount, quantity);\\n        // Now, we transfer to the token vault\\n        if(fnft.asset != address(0)){\\n            IERC20(fnft.asset).safeTransferFrom(_msgSender(), vault, quantity * amount);\\n        }\\n\\n        ITokenVault(vault).handleMultipleDeposits(fnftId, newFNFTId, fnft.depositAmount + amount);\\n\\n        emit FNFTAddionalDeposited(_msgSender(), newFNFTId, quantity, amount);\\n\\n        return newFNFTId;\\n    }\\n\\n    /**\\n     * @dev Returns the cached IAddressRegistry connected to this contract\\n     **/\\n    function getAddressesProvider() external view returns (IAddressRegistry) {\\n        return addressesProvider;\\n    }\\n\\n    //\\n    // INTERNAL FUNCTIONS\\n    //\\n\\n    function doMint(\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        uint fnftId,\\n        IRevest.FNFTConfig memory fnftConfig,\\n        uint weiValue\\n    ) internal {\\n        bool isSingular;\\n        uint totalQuantity = quantities[0];\\n        {\\n            uint rec = recipients.length;\\n            uint quant = quantities.length;\\n            require(rec == quant, \\\"recipients and quantities arrays must match\\\");\\n            // Calculate total quantity\\n            isSingular = rec == 1;\\n            if(!isSingular) {\\n                for(uint i = 1; i < quant; i++) {\\n                    totalQuantity += quantities[i];\\n                }\\n            }\\n            require(totalQuantity > 0, \\\"E003\\\");\\n        }\\n\\n        // Gas optimization\\n        address vault = addressesProvider.getTokenVault();\\n\\n        // Take fees\\n        if(weiValue > 0) {\\n            // Immediately convert all ETH to WETH\\n            IWETH(WETH).deposit{value: weiValue}();\\n        }\\n\\n        if(flatWeiFee > 0) {\\n            require(weiValue >= flatWeiFee, \\\"E005\\\");\\n            address reward = addressesProvider.getRewardsHandler();\\n            if(!approved[reward]) {\\n                IERC20(WETH).approve(reward, MAX_INT);\\n                approved[reward] = true;\\n            }\\n            IRewardsHandler(reward).receiveFee(WETH, flatWeiFee);\\n        }\\n\\n        {\\n            uint totalERC20Fee = erc20Fee * totalQuantity * fnftConfig.depositAmount / erc20multiplierPrecision;\\n            if(totalERC20Fee > 0) {\\n                IERC20(fnftConfig.asset).safeTransferFrom(_msgSender(), addressesProvider.getAdmin(), totalERC20Fee);\\n            }\\n        }\\n        // If there's any leftover ETH after the flat fee, convert it to WETH\\n        weiValue -= flatWeiFee;\\n        // Convert ETH to WETH if necessary\\n        if(weiValue > 0) {\\n            // If the asset is WETH, we also enable sending ETH to pay for the tx fee. Not required though\\n            require(fnftConfig.asset == WETH, \\\"E053\\\");\\n            require(weiValue >= fnftConfig.depositAmount, \\\"E015\\\");\\n        }\\n\\n        // Create the FNFT and update accounting within TokenVault\\n        ITokenVault(vault).createFNFT(fnftId, fnftConfig, totalQuantity, _msgSender());\\n\\n        // Now, we move the funds to token vault from the message sender\\n        if(fnftConfig.asset != address(0)){\\n            IERC20(fnftConfig.asset).safeTransferFrom(_msgSender(), vault, totalQuantity * fnftConfig.depositAmount);\\n        }\\n        // Mint NFT\\n        // Gas optimization\\n        if(!isSingular) {\\n            getFNFTHandler().mintBatchRec(recipients, quantities, fnftId, totalQuantity, '');\\n        } else {\\n            getFNFTHandler().mint(recipients[0], fnftId, quantities[0], '');\\n        }\\n\\n    }\\n\\n    function burn(\\n        address account,\\n        uint id,\\n        uint amount\\n    ) internal {\\n        address fnftHandler = addressesProvider.getRevestFNFT();\\n        require(IFNFTHandler(fnftHandler).getSupply(id) - amount >= 0, \\\"E025\\\");\\n        IFNFTHandler(fnftHandler).burn(account, id, amount);\\n    }\\n\\n    function setFlatWeiFee(uint wethFee) external override onlyOwner {\\n        flatWeiFee = wethFee;\\n    }\\n\\n    function setERC20Fee(uint erc20) external override onlyOwner {\\n        erc20Fee = erc20;\\n    }\\n\\n    function getFlatWeiFee() external view override returns (uint) {\\n        return flatWeiFee;\\n    }\\n\\n    function getERC20Fee() external view override returns (uint) {\\n        return erc20Fee;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165(account).supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IRevest {\\n    event FNFTTimeLockMinted(\\n        address indexed asset,\\n        address indexed from,\\n        uint indexed fnftId,\\n        uint endTime,\\n        uint[] quantities,\\n        FNFTConfig fnftConfig\\n    );\\n\\n    event FNFTValueLockMinted(\\n        address indexed primaryAsset,\\n        address indexed from,\\n        uint indexed fnftId,\\n        address compareTo,\\n        address oracleDispatch,\\n        uint[] quantities,\\n        FNFTConfig fnftConfig\\n    );\\n\\n    event FNFTAddressLockMinted(\\n        address indexed asset,\\n        address indexed from,\\n        uint indexed fnftId,\\n        address trigger,\\n        uint[] quantities,\\n        FNFTConfig fnftConfig\\n    );\\n\\n    event FNFTWithdrawn(\\n        address indexed from,\\n        uint indexed fnftId,\\n        uint indexed quantity\\n    );\\n\\n    event FNFTSplit(\\n        address indexed from,\\n        uint[] indexed newFNFTId,\\n        uint[] indexed proportions,\\n        uint quantity\\n    );\\n\\n    event FNFTUnlocked(\\n        address indexed from,\\n        uint indexed fnftId\\n    );\\n\\n    event FNFTMaturityExtended(\\n        address indexed from,\\n        uint indexed fnftId,\\n        uint indexed newExtendedTime\\n    );\\n\\n    event FNFTAddionalDeposited(\\n        address indexed from,\\n        uint indexed newFNFTId,\\n        uint indexed quantity,\\n        uint amount\\n    );\\n\\n    struct FNFTConfig {\\n        address asset; // The token being stored\\n        address pipeToContract; // Indicates if FNFT will pipe to another contract\\n        uint depositAmount; // How many tokens\\n        uint depositMul; // Deposit multiplier\\n        uint split; // Number of splits remaining\\n        uint depositStopTime; //\\n        bool maturityExtension; // Maturity extensions remaining\\n        bool isMulti; //\\n        bool nontransferrable; // False by default (transferrable) //\\n    }\\n\\n    // Refers to the global balance for an ERC20, encompassing possibly many FNFTs\\n    struct TokenTracker {\\n        uint lastBalance;\\n        uint lastMul;\\n    }\\n\\n    enum LockType {\\n        DoesNotExist,\\n        TimeLock,\\n        ValueLock,\\n        AddressLock\\n    }\\n\\n    struct LockParam {\\n        address addressLock;\\n        uint timeLockExpiry;\\n        LockType lockType;\\n        ValueLock valueLock;\\n    }\\n\\n    struct Lock {\\n        address addressLock;\\n        LockType lockType;\\n        ValueLock valueLock;\\n        uint timeLockExpiry;\\n        uint creationTime;\\n        bool unlocked;\\n    }\\n\\n    struct ValueLock {\\n        address asset;\\n        address compareTo;\\n        address oracle;\\n        uint unlockValue;\\n        bool unlockRisingEdge;\\n    }\\n\\n    function mintTimeLock(\\n        uint endTime,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable returns (uint);\\n\\n    function mintValueLock(\\n        address primaryAsset,\\n        address compareTo,\\n        uint unlockValue,\\n        bool unlockRisingEdge,\\n        address oracleDispatch,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable returns (uint);\\n\\n    function mintAddressLock(\\n        address trigger,\\n        bytes memory arguments,\\n        address[] memory recipients,\\n        uint[] memory quantities,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external payable returns (uint);\\n\\n    function withdrawFNFT(uint tokenUID, uint quantity) external;\\n\\n    function unlockFNFT(uint tokenUID) external;\\n\\n    function splitFNFT(\\n        uint fnftId,\\n        uint[] memory proportions,\\n        uint quantity\\n    ) external returns (uint[] memory newFNFTIds);\\n\\n    function depositAdditionalToFNFT(\\n        uint fnftId,\\n        uint amount,\\n        uint quantity\\n    ) external returns (uint);\\n\\n    function setFlatWeiFee(uint wethFee) external;\\n\\n    function setERC20Fee(uint erc20) external;\\n\\n    function getFlatWeiFee() external returns (uint);\\n\\n    function getERC20Fee() external returns (uint);\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Provider interface for Revest FNFTs\\n * @dev\\n *\\n */\\ninterface IAddressRegistry {\\n\\n    function initialize(\\n        address lock_manager_,\\n        address liquidity_,\\n        address revest_token_,\\n        address token_vault_,\\n        address revest_,\\n        address fnft_,\\n        address metadata_,\\n        address admin_,\\n        address rewards_\\n    ) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function setAdmin(address admin) external;\\n\\n    function getLockManager() external view returns (address);\\n\\n    function setLockManager(address manager) external;\\n\\n    function getTokenVault() external view returns (address);\\n\\n    function setTokenVault(address vault) external;\\n\\n    function getRevestFNFT() external view returns (address);\\n\\n    function setRevestFNFT(address fnft) external;\\n\\n    function getMetadataHandler() external view returns (address);\\n\\n    function setMetadataHandler(address metadata) external;\\n\\n    function getRevest() external view returns (address);\\n\\n    function setRevest(address revest) external;\\n\\n    function getDEX(uint index) external view returns (address);\\n\\n    function setDex(address dex) external;\\n\\n    function getRevestToken() external view returns (address);\\n\\n    function setRevestToken(address token) external;\\n\\n    function getRewardsHandler() external view returns(address);\\n\\n    function setRewardsHandler(address esc) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLPs() external view returns (address);\\n\\n    function setLPs(address liquidToken) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILockManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRevest.sol\\\";\\n\\ninterface ILockManager {\\n\\n    function createLock(uint fnftId, IRevest.LockParam memory lock) external returns (uint);\\n\\n    function getLock(uint lockId) external view returns (IRevest.Lock memory);\\n\\n    function fnftIdToLockId(uint fnftId) external view returns (uint);\\n\\n    function fnftIdToLock(uint fnftId) external view returns (IRevest.Lock memory);\\n\\n    function pointFNFTToLock(uint fnftId, uint lockId) external;\\n\\n    function lockTypes(uint tokenId) external view returns (IRevest.LockType);\\n\\n    function unlockFNFT(uint fnftId, address sender) external returns (bool);\\n\\n    function getLockMaturity(uint fnftId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IInterestHandler  {\\n\\n    function registerDeposit(uint fnftId) external;\\n\\n    function getPrincipal(uint fnftId) external view returns (uint);\\n\\n    function getInterest(uint fnftId) external view returns (uint);\\n\\n    function getAmountToWithdraw(uint fnftId) external view returns (uint);\\n\\n    function getUnderlyingToken(uint fnftId) external view returns (address);\\n\\n    function getUnderlyingValue(uint fnftId) external view returns (uint);\\n\\n    //These methods exist for external operations\\n    function getPrincipalDetail(uint historic, uint amount, address asset) external view returns (uint);\\n\\n    function getInterestDetail(uint historic, uint amount, address asset) external view returns (uint);\\n\\n    function getUnderlyingTokenDetail(address asset) external view returns (address);\\n\\n    function getInterestRate(address asset) external view returns (uint);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRevest.sol\\\";\\n\\ninterface ITokenVault {\\n\\n    function createFNFT(\\n        uint fnftId,\\n        IRevest.FNFTConfig memory fnftConfig,\\n        uint quantity,\\n        address from\\n    ) external;\\n\\n    function withdrawToken(\\n        uint fnftId,\\n        uint quantity,\\n        address user\\n    ) external;\\n\\n    function depositToken(\\n        uint fnftId,\\n        uint amount,\\n        uint quantity\\n    ) external;\\n\\n    function cloneFNFTConfig(IRevest.FNFTConfig memory old) external returns (IRevest.FNFTConfig memory);\\n\\n    function mapFNFTToToken(\\n        uint fnftId,\\n        IRevest.FNFTConfig memory fnftConfig\\n    ) external;\\n\\n    function handleMultipleDeposits(\\n        uint fnftId,\\n        uint newFNFTId,\\n        uint amount\\n    ) external;\\n\\n    function splitFNFT(\\n        uint fnftId,\\n        uint[] memory newFNFTIds,\\n        uint[] memory proportions,\\n        uint quantity\\n    ) external;\\n\\n    function getFNFT(uint fnftId) external view returns (IRevest.FNFTConfig memory);\\n    function getFNFTCurrentValue(uint fnftId) external view returns (uint);\\n    function getNontransferable(uint fnftId) external view returns (bool);\\n    function getSplitsRemaining(uint fnftId) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IRewardsHandler {\\n\\n    struct UserBalance {\\n        uint allocPoint; // Allocation points\\n        uint lastMul;\\n    }\\n\\n    function receiveFee(address token, uint amount) external;\\n\\n    function updateLPShares(uint fnftId, uint newShares) external;\\n\\n    function updateBasicShares(uint fnftId, uint newShares) external;\\n\\n    function getAllocPoint(uint fnftId, address token, bool isBasic) external view returns (uint);\\n\\n    function claimRewards(uint fnftId, address caller) external returns (uint);\\n\\n    function setStakingContract(address stake) external;\\n\\n    function getRewards(uint fnftId, address token) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOracleDispatch.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOracleDispatch {\\n\\n    // Attempts to update oracle and returns true if successful. Returns true if update unnecessary\\n    function updateOracle(address asset, address compareTo) external returns (bool);\\n\\n    // Will return true if oracle does not need to be poked or if poke was successful\\n    function pokeOracle(address asset, address compareTo) external returns (bool);\\n\\n    // Will return true if oracle already initialized, if oracle has successfully been initialized by this call,\\n    // or if oracle does not need to be initialized\\n    function initializeOracle(address asset, address compareTo) external returns (bool);\\n\\n    // Gets the value of the asset\\n    // Oracle = the oracle address in specific. Optional parameter\\n    // Inverted pair = whether or not this call represents an inversion of typical type (ERC20 underlying, USDC compareTo) to (USDC underlying, ERC20 compareTo)\\n    // Must take inverse of value in this case to get REAL value\\n    function getValueOfAsset(\\n        address asset,\\n        address compareTo,\\n        bool risingEdge\\n    )  external view returns (uint);\\n\\n    // Does this oracle need to be updated prior to our reading the price?\\n    // Return false if we are within desired time period\\n    // Or if this type of oracle does not require updates\\n    function oracleNeedsUpdates(address asset, address compareTo) external view returns (bool);\\n\\n    // Does this oracle need to be poked prior to update and withdrawal?\\n    function oracleNeedsPoking(address asset, address compareTo) external view returns (bool);\\n\\n    function oracleNeedsInitialization(address asset, address compareTo) external view returns (bool);\\n\\n    //Only ever called if oracle needs initialization\\n    function canOracleBeCreatedForRoute(address asset, address compareTo) external view returns (bool);\\n\\n    // How long to wait after poking the oracle before you can update it again and withdraw\\n    function getTimePeriodAfterPoke(address asset, address compareTo) external view returns (uint);\\n\\n    // Returns a direct reference to the address that the specific contract for this pair is registered at\\n    function getOracleForPair(address asset, address compareTo) external view returns (address);\\n\\n    // Returns a boolean if this oracle can provide data for the requested pair, used during FNFT creation\\n    function getPairHasOracle(address asset, address compareTo) external view returns (bool);\\n\\n    //Returns the instantaneous price of asset and the decimals for that price\\n    function getInstantPrice(address asset, address compareTo) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOutputReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRegistryProvider.sol\\\";\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\n\\n/**\\n * @title Provider interface for Revest FNFTs\\n */\\ninterface IOutputReceiver is IRegistryProvider, IERC165 {\\n\\n    function receiveRevestOutput(\\n        uint fnftId,\\n        address asset,\\n        address payable owner,\\n        uint quantity\\n    ) external;\\n\\n    function getCustomMetadata(uint fnftId) external view returns (string memory);\\n\\n    function getValue(uint fnftId) external view returns (uint);\\n\\n    function getAsset(uint fnftId) external view returns (address);\\n\\n    function getOutputDisplayValues(uint fnftId) external view returns (bytes memory);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IRegistryProvider.sol\\\";\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\n/**\\n * @title Provider interface for Revest FNFTs\\n * @dev Address locks MUST be non-upgradeable to be considered for trusted status\\n * @author Revest\\n */\\ninterface IAddressLock is IRegistryProvider, IERC165{\\n\\n    /// Creates a lock to the specified lockID\\n    /// @param fnftId the fnftId to map this lock to. Not recommended for typical locks, as it will break on splitting\\n    /// @param lockId the lockId to map this lock to. Recommended uint for storing references to lock configurations\\n    /// @param arguments an abi.encode() bytes array. Allows frontend to encode and pass in an arbitrary set of parameters\\n    /// @dev creates a lock for the specified lockId. Will be called during the creation process for address locks when the address\\n    ///      of a contract implementing this interface is passed in as the \\\"trigger\\\" address for minting an address lock. The bytes\\n    ///      representing any parameters this lock requires are passed through to this method, where abi.decode must be call on them\\n    function createLock(uint fnftId, uint lockId, bytes memory arguments) external;\\n\\n    /// Updates a lock at the specified lockId\\n    /// @param fnftId the fnftId that can map to a lock config stored in implementing contracts. Not recommended, as it will break on splitting\\n    /// @param lockId the lockId that maps to the lock config which should be updated. Recommended for retrieving references to lock configurations\\n    /// @param arguments an abi.encode() bytes array. Allows frontend to encode and pass in an arbitrary set of parameters\\n    /// @dev updates a lock for the specified lockId. Will be called by the frontend from the information section if an update is requested\\n    ///      can further accept and decode parameters to use in modifying the lock's config or triggering other actions\\n    ///      such as triggering an on-chain oracle to update\\n    function updateLock(uint fnftId, uint lockId, bytes memory arguments) external;\\n\\n    /// Whether or not the lock can be unlocked\\n    /// @param fnftId the fnftId that can map to a lock config stored in implementing contracts. Not recommended, as it will break on splitting\\n    /// @param lockId the lockId that maps to the lock config which should be updated. Recommended for retrieving references to lock configurations\\n    /// @dev this method is called during the unlocking and withdrawal processes by the Revest contract - it is also used by the frontend\\n    ///      if this method is returning true and someone attempts to unlock or withdraw from an FNFT attached to the requested lock, the request will succeed\\n    /// @return whether or not this lock may be unlocked\\n    function isUnlockable(uint fnftId, uint lockId) external view returns (bool);\\n\\n    /// Provides an encoded bytes arary that represents values this lock wants to display on the info screen\\n    /// Info to decode these values is provided in the metadata file\\n    /// @param fnftId the fnftId that can map to a lock config stored in implementing contracts. Not recommended, as it will break on splitting\\n    /// @param lockId the lockId that maps to the lock config which should be updated. Recommended for retrieving references to lock configurations\\n    /// @dev used by the frontend to fetch on-chain data on the state of any given lock\\n    /// @return a bytes array that represents the result of calling abi.encode on values which the developer wants to appear on the frontend\\n    function getDisplayValues(uint fnftId, uint lockId) external view returns (bytes memory);\\n\\n    /// Maps to a URL, typically IPFS-based, that contains information on how to encode and decode paramters sent to and from this lock\\n    /// Please see additional documentation for JSON config info\\n    /// @dev this method will be called by the frontend only but is crucial to properly implement for proper minting and information workflows\\n    /// @return a URL to the JSON file containing this lock's metadata schema\\n    function getMetadata() external view returns (string memory);\\n\\n    /// Whether or not this lock will need updates and should display the option for them\\n    /// @dev this will be called by the frontend to determine if update inputs and buttons should be displayed\\n    /// @return whether or not the locks created by this contract will need updates\\n    function needsUpdate() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RevestAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport \\\"../interfaces/ILockManager.sol\\\";\\nimport \\\"../interfaces/IRewardsHandler.sol\\\";\\nimport \\\"../interfaces/ITokenVault.sol\\\";\\nimport \\\"../interfaces/IRevestToken.sol\\\";\\nimport \\\"../interfaces/IFNFTHandler.sol\\\";\\nimport \\\"../lib/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"../interfaces/IInterestHandler.sol\\\";\\n\\n\\ncontract RevestAccessControl is Ownable {\\n    IAddressRegistry internal addressesProvider;\\n    address addressProvider;\\n\\n    constructor(address provider) Ownable() {\\n        addressesProvider = IAddressRegistry(provider);\\n        addressProvider = provider;\\n    }\\n\\n    modifier onlyRevest() {\\n        require(_msgSender() != address(0), \\\"E004\\\");\\n        require(\\n                _msgSender() == addressesProvider.getLockManager() ||\\n                _msgSender() == addressesProvider.getRewardsHandler() ||\\n                _msgSender() == addressesProvider.getTokenVault() ||\\n                _msgSender() == addressesProvider.getRevest() ||\\n                _msgSender() == addressesProvider.getRevestToken(),\\n            \\\"E016\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRevestController() {\\n        require(_msgSender() != address(0), \\\"E004\\\");\\n        require(_msgSender() == addressesProvider.getRevest(), \\\"E017\\\");\\n        _;\\n    }\\n\\n    modifier onlyTokenVault() {\\n        require(_msgSender() != address(0), \\\"E004\\\");\\n        require(_msgSender() == addressesProvider.getTokenVault(), \\\"E017\\\");\\n        _;\\n    }\\n\\n    function setAddressRegistry(address registry) external onlyOwner {\\n        addressesProvider = IAddressRegistry(registry);\\n    }\\n\\n    function getAdmin() internal view returns (address) {\\n        return addressesProvider.getAdmin();\\n    }\\n\\n    function getRevest() internal view returns (IRevest) {\\n        return IRevest(addressesProvider.getRevest());\\n    }\\n\\n    function getRevestToken() internal view returns (IRevestToken) {\\n        return IRevestToken(addressesProvider.getRevestToken());\\n    }\\n\\n    function getLockManager() internal view returns (ILockManager) {\\n        return ILockManager(addressesProvider.getLockManager());\\n    }\\n\\n    function getTokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(addressesProvider.getTokenVault());\\n    }\\n\\n    function getUniswapV2() internal view returns (IUniswapV2Factory) {\\n        return IUniswapV2Factory(addressesProvider.getDEX(0));\\n    }\\n\\n    function getFNFTHandler() internal view returns (IFNFTHandler) {\\n        return IFNFTHandler(addressesProvider.getRevestFNFT());\\n    }\\n\\n    function getRewardsHandler() internal view returns (IRewardsHandler) {\\n        return IRewardsHandler(addressesProvider.getRewardsHandler());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/RevestReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract RevestReentrancyGuard is ReentrancyGuard {\\n\\n    // Used to avoid reentrancy\\n    uint private constant MAX_INT = 0xFFFFFFFFFFFFFFFF;\\n    uint private currentId = MAX_INT;\\n\\n    modifier revestNonReentrant(uint fnftId) {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(fnftId != currentId, \\\"E052\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        currentId = fnftId;\\n\\n        _;\\n\\n        currentId = MAX_INT;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/IUnicryptV2Locker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n// This contract locks uniswap v2 liquidity tokens. Used to give investors peace of mind a token team has locked liquidity\\n// and that the univ2 tokens cannot be removed from uniswap until the specified unlock date has been reached.\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUnicryptV2Locker {\\n    event onDeposit(address lpToken, address user, uint amount, uint lockDate, uint unlockDate);\\n    event onWithdraw(address lpToken, uint amount);\\n\\n    /**\\n     * @notice Creates a new lock\\n     * @param _lpToken the univ2 token address\\n     * @param _amount amount of LP tokens to lock\\n     * @param _unlock_date the unix timestamp (in seconds) until unlock\\n     * @param _referral the referrer address if any or address(0) for none\\n     * @param _fee_in_eth fees can be paid in eth or in a secondary token such as UNCX with a discount on univ2 tokens\\n     * @param _withdrawer the user who can withdraw liquidity once the lock expires.\\n     */\\n    function lockLPToken(\\n        address _lpToken,\\n        uint _amount,\\n        uint _unlock_date,\\n        address payable _referral,\\n        bool _fee_in_eth,\\n        address payable _withdrawer\\n    ) external payable;\\n\\n    /**\\n     * @notice extend a lock with a new unlock date, _index and _lockID ensure the correct lock is changed\\n     * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\\n     */\\n    function relock(\\n        address _lpToken,\\n        uint _index,\\n        uint _lockID,\\n        uint _unlock_date\\n    ) external;\\n\\n    /**\\n     * @notice withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed\\n     * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\\n     */\\n    function withdraw(\\n        address _lpToken,\\n        uint _index,\\n        uint _lockID,\\n        uint _amount\\n    ) external;\\n\\n    /**\\n     * @notice increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees, and faster loading on our live block explorer\\n     */\\n    function incrementLock(\\n        address _lpToken,\\n        uint _index,\\n        uint _lockID,\\n        uint _amount\\n    ) external;\\n\\n    /**\\n     * @notice split a lock into two seperate locks, useful when a lock is about to expire and youd like to relock a portion\\n     * and withdraw a smaller portion\\n     */\\n    function splitLock(\\n        address _lpToken,\\n        uint _index,\\n        uint _lockID,\\n        uint _amount\\n    ) external payable;\\n\\n    /**\\n     * @notice transfer a lock to a new owner, e.g. presale project -> project owner\\n     * CAN USE TO MIGRATE UNICRYPT LOCKS TO OUR PLATFORM\\n     * Must be called by the owner of the token\\n     */\\n    function transferLockOwnership(\\n        address _lpToken,\\n        uint _index,\\n        uint _lockID,\\n        address payable _newOwner\\n    ) external;\\n\\n    /**\\n     * @notice migrates liquidity to uniswap v3\\n     */\\n    function migrate(\\n        address _lpToken,\\n        uint _index,\\n        uint _lockID,\\n        uint _amount\\n    ) external;\\n\\n    function getNumLocksForToken(address _lpToken) external view returns (uint);\\n\\n    function getNumLockedTokens() external view returns (uint);\\n\\n    function getLockedTokenAtIndex(uint _index) external view returns (address);\\n\\n    // user functions\\n    function getUserNumLockedTokens(address _user) external view returns (uint);\\n\\n    function getUserLockedTokenAtIndex(address _user, uint _index) external view returns (address);\\n\\n    function getUserNumLocksForToken(address _user, address _lpToken) external view returns (uint);\\n\\n    function getUserLockForTokenAtIndex(\\n        address _user,\\n        address _lpToken,\\n        uint _index\\n    )\\n        external\\n        view\\n        returns (\\n            uint,\\n            uint,\\n            uint,\\n            uint,\\n            uint,\\n            address\\n        );\\n\\n    function tokenLocks(address asset, uint _lockID)\\n        external\\n        returns (\\n            uint lockDate,\\n            uint amount,\\n            uint initialAmount,\\n            uint unlockDate,\\n            uint lockID,\\n            address owner\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/lib/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n\\n    function deposit() external payable;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/FNFTHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"./interfaces/IRevest.sol\\\";\\nimport \\\"./interfaces/IAddressRegistry.sol\\\";\\nimport \\\"./interfaces/ILockManager.sol\\\";\\nimport \\\"./interfaces/ITokenVault.sol\\\";\\nimport \\\"./interfaces/IAddressLock.sol\\\";\\nimport \\\"./utils/RevestAccessControl.sol\\\";\\nimport \\\"./interfaces/IFNFTHandler.sol\\\";\\nimport \\\"./interfaces/IMetadataHandler.sol\\\";\\n\\ncontract FNFTHandler is ERC1155, AccessControl, RevestAccessControl, IFNFTHandler {\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    mapping(uint => uint) public supply;\\n    uint public fnftsCreated = 0;\\n\\n    /**\\n     * @dev Primary constructor to create an instance of NegativeEntropy\\n     * Grants ADMIN and MINTER_ROLE to whoever creates the contract\\n     */\\n    constructor(address provider) ERC1155(\\\"\\\") RevestAccessControl(provider) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override (AccessControl, ERC1155) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function mint(address account, uint id, uint amount, bytes memory data) external override onlyRevestController {\\n        supply[id] += amount;\\n        _mint(account, id, amount, data);\\n        fnftsCreated += 1;\\n    }\\n\\n    function mintBatchRec(address[] calldata recipients, uint[] calldata quantities, uint id, uint newSupply, bytes memory data) external override onlyRevestController {\\n        supply[id] += newSupply;\\n        for(uint i = 0; i < quantities.length; i++) {\\n            _mint(recipients[i], id, quantities[i], data);\\n        }\\n        fnftsCreated += 1;\\n    }\\n\\n    function mintBatch(address to, uint[] memory ids, uint[] memory amounts, bytes memory data) external override onlyRevestController {\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function setURI(string memory newuri) external override onlyRevestController {\\n        _setURI(newuri);\\n    }\\n\\n    function burn(address account, uint id, uint amount) external override onlyRevestController {\\n        supply[id] -= amount;\\n        _burn(account, id, amount);\\n    }\\n\\n    function burnBatch(address account, uint[] memory ids, uint[] memory amounts) external override onlyRevestController {\\n        _burnBatch(account, ids, amounts);\\n    }\\n\\n    function getBalance(address account, uint id) external view override returns (uint) {\\n        return balanceOf(account, id);\\n    }\\n\\n    function getSupply(uint fnftId) public view override returns (uint) {\\n        return supply[fnftId];\\n    }\\n\\n    function getNextId() public view override returns (uint) {\\n        return fnftsCreated;\\n    }\\n\\n\\n    // OVERIDDEN ERC-1155 METHODS\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint[] memory ids,\\n        uint[] memory amounts,\\n        bytes memory data\\n    ) internal override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n        // Loop because all batch transfers must be checked\\n        // Will only execute once on singular transfer\\n        if (from != address(0) && to != address(0)) {\\n            address vault = addressesProvider.getTokenVault();\\n            bool canTransfer = !ITokenVault(vault).getNontransferable(ids[0]);\\n            // Only check if not from minter\\n            // And not being burned\\n            if(ids.length > 1) {\\n                uint iterator = 0;\\n                while (canTransfer && iterator < ids.length) {\\n                    canTransfer = !ITokenVault(vault).getNontransferable(ids[iterator]);\\n                    iterator += 1;\\n                }\\n            }\\n            require(canTransfer, \\\"E046\\\");\\n        }\\n    }\\n\\n    function uri(uint fnftId) public view override returns (string memory) {\\n        return IMetadataHandler(addressesProvider.getMetadataHandler()).getTokenURI(fnftId);\\n    }\\n\\n    function renderTokenURI(\\n        uint tokenId,\\n        address owner\\n    ) public view returns (\\n        string memory baseRenderURI,\\n        string[] memory parameters\\n    ) {\\n        return IMetadataHandler(addressesProvider.getMetadataHandler()).getRenderTokenURI(tokenId, owner);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistryProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IAddressRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILockManager.sol\\\";\\nimport \\\"../interfaces/ITokenVault.sol\\\";\\nimport \\\"../lib/uniswap/IUniswapV2Factory.sol\\\";\\n\\ninterface IRegistryProvider {\\n    function setAddressRegistry(address revest) external;\\n\\n    function getAddressRegistry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswap/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevestToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRevestToken is IERC20 {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFNFTHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity >=0.8.0;\\n\\n\\ninterface IFNFTHandler  {\\n    function mint(address account, uint id, uint amount, bytes memory data) external;\\n\\n    function mintBatchRec(address[] memory recipients, uint[] memory quantities, uint id, uint newSupply, bytes memory data) external;\\n\\n    function mintBatch(address to, uint[] memory ids, uint[] memory amounts, bytes memory data) external;\\n\\n    function setURI(string memory newuri) external;\\n\\n    function burn(address account, uint id, uint amount) external;\\n\\n    function burnBatch(address account, uint[] memory ids, uint[] memory amounts) external;\\n\\n    function getBalance(address tokenHolder, uint id) external view returns (uint);\\n\\n    function getSupply(uint fnftId) external view returns (uint);\\n\\n    function getNextId() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMetadataHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU-GPL v3.0 or later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMetadataHandler {\\n\\n    function getTokenURI(uint fnftId) external view returns (string memory );\\n\\n    function setTokenURI(uint fnftId, string memory _uri) external;\\n\\n    function getRenderTokenURI(\\n        uint tokenId,\\n        address owner\\n    ) external view returns (\\n        string memory baseRenderURI,\\n        string[] memory parameters\\n    );\\n\\n    function setRenderTokenURI(\\n        uint tokenID,\\n        string memory baseRenderURI\\n    ) external;\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFNFTId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FNFTAddionalDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trigger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pipeToContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStopTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"maturityExtension\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMulti\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nontransferrable\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IRevest.FNFTConfig\",\"name\":\"fnftConfig\",\"type\":\"tuple\"}],\"name\":\"FNFTAddressLockMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newExtendedTime\",\"type\":\"uint256\"}],\"name\":\"FNFTMaturityExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"newFNFTId\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"proportions\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"FNFTSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pipeToContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStopTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"maturityExtension\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMulti\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nontransferrable\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IRevest.FNFTConfig\",\"name\":\"fnftConfig\",\"type\":\"tuple\"}],\"name\":\"FNFTTimeLockMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"}],\"name\":\"FNFTUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primaryAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleDispatch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pipeToContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStopTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"maturityExtension\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMulti\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nontransferrable\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IRevest.FNFTConfig\",\"name\":\"fnftConfig\",\"type\":\"tuple\"}],\"name\":\"FNFTValueLockMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"FNFTWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESS_LOCK_INTERFACE_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"depositAdditionalToFNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"extendFNFTMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flatWeiFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressesProvider\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getERC20Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlatWeiFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trigger\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"arguments\",\"type\":\"bytes\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pipeToContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStopTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"maturityExtension\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMulti\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nontransferrable\",\"type\":\"bool\"}],\"internalType\":\"struct IRevest.FNFTConfig\",\"name\":\"fnftConfig\",\"type\":\"tuple\"}],\"name\":\"mintAddressLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pipeToContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStopTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"maturityExtension\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMulti\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nontransferrable\",\"type\":\"bool\"}],\"internalType\":\"struct IRevest.FNFTConfig\",\"name\":\"fnftConfig\",\"type\":\"tuple\"}],\"name\":\"mintTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"primaryAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"compareTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unlockRisingEdge\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"oracleDispatch\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pipeToContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"split\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStopTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"maturityExtension\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMulti\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nontransferrable\",\"type\":\"bool\"}],\"internalType\":\"struct IRevest.FNFTConfig\",\"name\":\"fnftConfig\",\"type\":\"tuple\"}],\"name\":\"mintValueLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setAddressRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"erc20\",\"type\":\"uint256\"}],\"name\":\"setERC20Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethFee\",\"type\":\"uint256\"}],\"name\":\"setFlatWeiFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"proportions\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"splitFNFT\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"}],\"name\":\"unlockFNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"withdrawFNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Revest", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000d721a90dd7e010c8c5e022cc0100c55ac78e0fc4000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}]}